
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 50 00 20 7d 0f 00 08 5b 10 00 08 55 10 00 08     .P. }...[...U...
 8000010:	55 10 00 08 55 10 00 08 55 10 00 08 00 00 00 00     U...U...U.......
	...
 800002c:	5b 10 00 08 5b 10 00 08 00 00 00 00 5b 10 00 08     [...[.......[...
 800003c:	71 11 00 08 55 10 00 08 55 10 00 08 55 10 00 08     q...U...U...U...
 800004c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800005c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800006c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800007c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800008c:	55 10 00 08 71 03 00 08 55 10 00 08 55 10 00 08     U...q...U...U...
 800009c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 80000ac:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 80000bc:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 80000cc:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 80000dc:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 80000ec:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 80000fc:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800010c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800011c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800012c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800013c:	55 10 00 08 55 10 00 08 55 10 00 08 55 10 00 08     U...U...U...U...
 800014c:	55 10 00 08                                         U...

08000150 <clock_setup>:
static volatile uint8_t is_forced_nak = 0;


/* Set STM32 to 72 MHz. */
static void clock_setup(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8000154:	f001 f906 	bl	8001364 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
    rcc_periph_clock_enable(RCC_GPIOC);
 8000158:	f44f 7041 	mov.w	r0, #772	; 0x304
 800015c:	f001 f948 	bl	80013f0 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 8000160:	f240 3097 	movw	r0, #919	; 0x397
 8000164:	f001 f944 	bl	80013f0 <rcc_periph_clock_enable>
	// GPIOA, AFIO clocks are handled by st_init();
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <main>:


int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af02      	add	r7, sp, #8
	/* Hardware config starts */
	clock_setup();
 8000172:	f7ff ffed 	bl	8000150 <clock_setup>
	systick_init();
 8000176:	f000 ffe1 	bl	800113c <systick_init>
	/* Hardware config ends */

	//----------------------------------------------------------
	st_init();
 800017a:	f000 fd39 	bl	8000bf0 <st_init>
	//rotating display to potrait mode
	//st_rotate_display(1);

	// Filling the display with some color
	st_fill_screen(ST_COLOR_NAVY);
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fcc4 	bl	8000b0c <st_fill_screen>

	st_draw_string_withbg(10, 200, "Tiny Monitor v1.0", ST_COLOR_CYAN, ST_COLOR_BLACK, &font_fixedsys_mono_24);
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <main+0x48>)
 8000186:	9301      	str	r3, [sp, #4]
 8000188:	2300      	movs	r3, #0
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <main+0x4c>)
 8000192:	21c8      	movs	r1, #200	; 0xc8
 8000194:	200a      	movs	r0, #10
 8000196:	f000 fb87 	bl	80008a8 <st_draw_string_withbg>
	st_draw_string(10, 10, "Connect USB...", 0xffff, &font_fixedsys_mono_24);
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <main+0x48>)
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001a2:	4a06      	ldr	r2, [pc, #24]	; (80001bc <main+0x50>)
 80001a4:	210a      	movs	r1, #10
 80001a6:	200a      	movs	r0, #10
 80001a8:	f000 fb62 	bl	8000870 <st_draw_string>

	// Init USB at the end so MCU can start sending data to display as soon as USB is present
	usb_init();
 80001ac:	f000 f808 	bl	80001c0 <usb_init>

	while (1)
 80001b0:	e7fe      	b.n	80001b0 <main+0x44>
 80001b2:	bf00      	nop
 80001b4:	08003d24 	.word	0x08003d24
 80001b8:	08003d2c 	.word	0x08003d2c
 80001bc:	08003d40 	.word	0x08003d40

080001c0 <usb_init>:
	return 0;
}


void usb_init()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af04      	add	r7, sp, #16
    // reset USB peripheral
    rcc_periph_reset_pulse(RST_USB);
 80001c6:	f240 2017 	movw	r0, #535	; 0x217
 80001ca:	f001 f91f 	bl	800140c <rcc_periph_reset_pulse>

    // Pull USB D+ (A12) low for 80ms to trigger device reenumeration
    gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
 80001ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001d2:	2200      	movs	r2, #0
 80001d4:	2101      	movs	r1, #1
 80001d6:	4816      	ldr	r0, [pc, #88]	; (8000230 <usb_init+0x70>)
 80001d8:	f000 ffd8 	bl	800118c <gpio_set_mode>
    gpio_clear(GPIOA, GPIO12);
 80001dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <usb_init+0x70>)
 80001e2:	f001 f804 	bl	80011ee <gpio_clear>
    delay(80);
 80001e6:	2050      	movs	r0, #80	; 0x50
 80001e8:	f000 ff8e 	bl	8001108 <delay>

    usb_init_serial_num();
 80001ec:	f000 ff3c 	bl	8001068 <usb_init_serial_num>

    // create USB device
    usb_device = usbd_init(&st_usbfs_v1_usb_driver, &usb_device_desc, usb_config_descs,
 80001f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001f4:	9302      	str	r3, [sp, #8]
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <usb_init+0x74>)
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2304      	movs	r3, #4
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <usb_init+0x78>)
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <usb_init+0x7c>)
 8000202:	490f      	ldr	r1, [pc, #60]	; (8000240 <usb_init+0x80>)
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <usb_init+0x84>)
 8000206:	f001 f957 	bl	80014b8 <usbd_init>
 800020a:	4603      	mov	r3, r0
 800020c:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <usb_init+0x88>)
 800020e:	6013      	str	r3, [r2, #0]
                           usb_desc_strings, sizeof(usb_desc_strings) / sizeof(usb_desc_strings[0]),
                           usbd_control_buffer, sizeof(usbd_control_buffer));

    // Set callback for config calls
    usbd_register_set_config_callback(usb_device, usb_set_config);
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <usb_init+0x88>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	490d      	ldr	r1, [pc, #52]	; (800024c <usb_init+0x8c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fd44 	bl	8001ca4 <usbd_register_set_config_callback>
    //register_wcid_desc(usb_device);

	

    // Enable interrupt
    nvic_set_priority(NVIC_USB_LP_CAN_RX0_IRQ, 2 << 6);
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	2014      	movs	r0, #20
 8000220:	f001 fe32 	bl	8001e88 <nvic_set_priority>
    nvic_enable_irq(NVIC_USB_LP_CAN_RX0_IRQ);
 8000224:	2014      	movs	r0, #20
 8000226:	f001 fe21 	bl	8001e6c <nvic_enable_irq>
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40010800 	.word	0x40010800
 8000234:	20000014 	.word	0x20000014
 8000238:	08003db8 	.word	0x08003db8
 800023c:	08003e10 	.word	0x08003e10
 8000240:	08003e20 	.word	0x08003e20
 8000244:	08003e48 	.word	0x08003e48
 8000248:	20000010 	.word	0x20000010
 800024c:	08000251 	.word	0x08000251

08000250 <usb_set_config>:

// Called when the host connects to the device and selects a configuration
void usb_set_config(usbd_device *usbd_dev, __attribute__((unused)) uint16_t wValue)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    usbd_ep_setup(usbd_dev, EP_DATA_OUT, USB_ENDPOINT_ATTR_BULK, BULK_MAX_PACKET_SIZE, usb_data_received);
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <usb_set_config+0x5c>)
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2340      	movs	r3, #64	; 0x40
 8000262:	2202      	movs	r2, #2
 8000264:	2101      	movs	r1, #1
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f001 f952 	bl	8001510 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_ISOCHRONOUS, BULK_MAX_PACKET_SIZE, nullptr);
 800026c:	2300      	movs	r3, #0
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2340      	movs	r3, #64	; 0x40
 8000272:	2201      	movs	r2, #1
 8000274:	2182      	movs	r1, #130	; 0x82
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f001 f94a 	bl	8001510 <usbd_ep_setup>

    //buffer.reset();
    is_forced_nak = 0;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <usb_set_config+0x60>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]

	usbd_register_control_callback(usb_device, 
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <usb_set_config+0x64>)
 8000284:	6818      	ldr	r0, [r3, #0]
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <usb_set_config+0x68>)
 8000288:	227f      	movs	r2, #127	; 0x7f
 800028a:	2141      	movs	r1, #65	; 0x41
 800028c:	f001 fa2e 	bl	80016ec <usbd_register_control_callback>
		USB_REQ_TYPE_VENDOR | USB_REQ_TYPE_INTERFACE, 
		USB_REQ_TYPE_TYPE | USB_REQ_TYPE_RECIPIENT, 
		prepare_to_receive_stream);

	st_draw_string(10, 40, "USB connected. Config is set...", 0xffff, &font_fixedsys_mono_24);
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <usb_set_config+0x6c>)
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <usb_set_config+0x70>)
 800029a:	2128      	movs	r1, #40	; 0x28
 800029c:	200a      	movs	r0, #10
 800029e:	f000 fae7 	bl	8000870 <st_draw_string>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	08000335 	.word	0x08000335
 80002b0:	20000114 	.word	0x20000114
 80002b4:	20000010 	.word	0x20000010
 80002b8:	080002c5 	.word	0x080002c5
 80002bc:	08003d24 	.word	0x08003d24
 80002c0:	08003d50 	.word	0x08003d50

080002c4 <prepare_to_receive_stream>:

// Called when host sends control transfer. 
// If host sends wValue=0x88 and bRequest=0x33, we'll prepare to receive streams
static enum usbd_request_return_codes prepare_to_receive_stream(usbd_device *usbd_dev, struct usb_setup_data *req, uint8_t **buf, uint16_t *len, usbd_control_complete_callback *complete) 
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af02      	add	r7, sp, #8
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	603b      	str	r3, [r7, #0]
	if (req->bRequest == 0x33 && req->wIndex == 0 && req->wValue == 0x88) 
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	2b33      	cmp	r3, #51	; 0x33
 80002d8:	d123      	bne.n	8000322 <prepare_to_receive_stream+0x5e>
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	889b      	ldrh	r3, [r3, #4]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d11e      	bne.n	8000322 <prepare_to_receive_stream+0x5e>
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	885b      	ldrh	r3, [r3, #2]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2b88      	cmp	r3, #136	; 0x88
 80002ec:	d119      	bne.n	8000322 <prepare_to_receive_stream+0x5e>
	{
		st_draw_string(10, 100, "Connected to host software...", 0xffff, &font_fixedsys_mono_24);
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <prepare_to_receive_stream+0x68>)
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <prepare_to_receive_stream+0x6c>)
 80002f8:	2164      	movs	r1, #100	; 0x64
 80002fa:	200a      	movs	r0, #10
 80002fc:	f000 fab8 	bl	8000870 <st_draw_string>

		// after writing string, prepare the display for drawing
		// Once we set the address window, we can fill the screen continuously without calling it again
		st_set_address_window(0, 0, 239, 239);
 8000300:	23ef      	movs	r3, #239	; 0xef
 8000302:	22ef      	movs	r2, #239	; 0xef
 8000304:	2100      	movs	r1, #0
 8000306:	2000      	movs	r0, #0
 8000308:	f000 f83e 	bl	8000388 <st_set_address_window>

		uint8_t ack_buff[1] = {0xAA}; //0xAA is the magic number that the python script is expecting
 800030c:	23aa      	movs	r3, #170	; 0xaa
 800030e:	753b      	strb	r3, [r7, #20]
		// Send host 0xAA to let know that we're ready
		usbd_ep_write_packet(usbd_dev, 0x82, ack_buff, 1);
 8000310:	f107 0214 	add.w	r2, r7, #20
 8000314:	2301      	movs	r3, #1
 8000316:	2182      	movs	r1, #130	; 0x82
 8000318:	68f8      	ldr	r0, [r7, #12]
 800031a:	f001 f919 	bl	8001550 <usbd_ep_write_packet>

		return USBD_REQ_HANDLED;
 800031e:	2301      	movs	r3, #1
 8000320:	e000      	b.n	8000324 <prepare_to_receive_stream+0x60>
	}
	return USBD_REQ_NEXT_CALLBACK;
 8000322:	2302      	movs	r3, #2
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	08003d24 	.word	0x08003d24
 8000330:	08003d70 	.word	0x08003d70

08000334 <usb_data_received>:

// Called when data has been received
void usb_data_received(__attribute__((unused)) usbd_device *usbd_dev, __attribute__((unused)) uint8_t ep)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b094      	sub	sp, #80	; 0x50
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
    // Retrieve USB data (has side effect of setting endpoint to VALID)
    uint8_t packet[BULK_MAX_PACKET_SIZE] __attribute__((aligned(4)));
    int len = usbd_ep_read_packet(usb_device, EP_DATA_OUT, packet, sizeof(packet));
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <usb_data_received+0x38>)
 8000342:	6818      	ldr	r0, [r3, #0]
 8000344:	f107 020c 	add.w	r2, r7, #12
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	2101      	movs	r1, #1
 800034c:	f001 f907 	bl	800155e <usbd_ep_read_packet>
 8000350:	4603      	mov	r3, r0
 8000352:	64fb      	str	r3, [r7, #76]	; 0x4c

	st_fill_color_array(packet, len);
 8000354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000356:	f107 030c 	add.w	r3, r7, #12
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fb71 	bl	8000a44 <st_fill_color_array>

	//usbd_ep_nak_set(usbd_dev, EP_DATA_OUT, 1);
	
	//usbd_ep_nak_set(usbd_dev, EP_DATA_OUT, 0);
}
 8000362:	bf00      	nop
 8000364:	3750      	adds	r7, #80	; 0x50
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000010 	.word	0x20000010

08000370 <usb_lp_can_rx0_isr>:
}


// USB interrupt handler
void usb_lp_can_rx0_isr()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
    usbd_poll(usb_device);
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <usb_lp_can_rx0_isr+0x14>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f001 f8c5 	bl	8001508 <usbd_poll>
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000010 	.word	0x20000010

08000388 <st_set_address_window>:
 * @param y1 start row address.
 * @param x2 end column address.
 * @param y2 end row address.
 */
void st_set_address_window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000388:	b490      	push	{r4, r7}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4604      	mov	r4, r0
 8000390:	4608      	mov	r0, r1
 8000392:	4611      	mov	r1, r2
 8000394:	461a      	mov	r2, r3
 8000396:	4623      	mov	r3, r4
 8000398:	80fb      	strh	r3, [r7, #6]
 800039a:	4603      	mov	r3, r0
 800039c:	80bb      	strh	r3, [r7, #4]
 800039e:	460b      	mov	r3, r1
 80003a0:	807b      	strh	r3, [r7, #2]
 80003a2:	4613      	mov	r3, r2
 80003a4:	803b      	strh	r3, [r7, #0]
 80003a6:	232a      	movs	r3, #42	; 0x2a
 80003a8:	737b      	strb	r3, [r7, #13]
__attribute__((always_inline)) static inline void _st_write_command_8bit(uint8_t cmd)
{
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_ACTIVE;
	#endif
	ST_DC_CMD;
 80003aa:	4b82      	ldr	r3, [pc, #520]	; (80005b4 <st_set_address_window+0x22c>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 80003b0:	4a81      	ldr	r2, [pc, #516]	; (80005b8 <st_set_address_window+0x230>)
 80003b2:	7b7b      	ldrb	r3, [r7, #13]
 80003b4:	6013      	str	r3, [r2, #0]
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_IDLE;
	#endif
}
 80003de:	bf00      	nop
	_st_write_command_8bit(ST7789_CASET);

	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 80003e0:	4b76      	ldr	r3, [pc, #472]	; (80005bc <st_set_address_window+0x234>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT((uint8_t)(x1 >> 8));
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	0a1b      	lsrs	r3, r3, #8
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b72      	ldr	r3, [pc, #456]	; (80005b8 <st_set_address_window+0x230>)
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)x1);
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <st_set_address_window+0x230>)
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)(x2 >> 8));
 800044a:	887b      	ldrh	r3, [r7, #2]
 800044c:	0a1b      	lsrs	r3, r3, #8
 800044e:	b29b      	uxth	r3, r3
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b59      	ldr	r3, [pc, #356]	; (80005b8 <st_set_address_window+0x230>)
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)x2);
 800047e:	887b      	ldrh	r3, [r7, #2]
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b4d      	ldr	r3, [pc, #308]	; (80005b8 <st_set_address_window+0x230>)
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	232b      	movs	r3, #43	; 0x2b
 80004b0:	73bb      	strb	r3, [r7, #14]
	ST_DC_CMD;
 80004b2:	4b40      	ldr	r3, [pc, #256]	; (80005b4 <st_set_address_window+0x22c>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 80004b8:	4a3f      	ldr	r2, [pc, #252]	; (80005b8 <st_set_address_window+0x230>)
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	6013      	str	r3, [r2, #0]
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
}
 80004e6:	bf00      	nop

	_st_write_command_8bit(ST7789_RASET);
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 80004e8:	4b34      	ldr	r3, [pc, #208]	; (80005bc <st_set_address_window+0x234>)
 80004ea:	2204      	movs	r2, #4
 80004ec:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT((uint8_t)(y1 >> 8));
 80004ee:	88bb      	ldrh	r3, [r7, #4]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <st_set_address_window+0x230>)
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)y1);
 8000522:	88bb      	ldrh	r3, [r7, #4]
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <st_set_address_window+0x230>)
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)(y2 >> 8));
 8000552:	883b      	ldrh	r3, [r7, #0]
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	b29b      	uxth	r3, r3
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <st_set_address_window+0x230>)
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)y2);
 8000586:	883b      	ldrh	r3, [r7, #0]
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <st_set_address_window+0x230>)
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e005      	b.n	80005c0 <st_set_address_window+0x238>
 80005b4:	40010814 	.word	0x40010814
 80005b8:	4001300c 	.word	0x4001300c
 80005bc:	40010810 	.word	0x40010810
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	232c      	movs	r3, #44	; 0x2c
 80005c6:	73fb      	strb	r3, [r7, #15]
	ST_DC_CMD;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <st_set_address_window+0x280>)
 80005ca:	2204      	movs	r2, #4
 80005cc:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <st_set_address_window+0x284>)
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
}
 80005fc:	bf00      	nop

	_st_write_command_8bit(ST7789_RAMWR);
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bc90      	pop	{r4, r7}
 8000606:	4770      	bx	lr
 8000608:	40010814 	.word	0x40010814
 800060c:	4001300c 	.word	0x4001300c

08000610 <_st_render_glyph>:
/*
 * Render a character glyph on the display. Called by `_st_draw_string_main()`
 * User need NOT call it
 */
void _st_render_glyph(uint16_t x, uint16_t y, uint16_t fore_color, uint16_t back_color, const tImage *glyph, uint8_t is_bg)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
 8000616:	4604      	mov	r4, r0
 8000618:	4608      	mov	r0, r1
 800061a:	4611      	mov	r1, r2
 800061c:	461a      	mov	r2, r3
 800061e:	4623      	mov	r3, r4
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	4603      	mov	r3, r0
 8000624:	80bb      	strh	r3, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	807b      	strh	r3, [r7, #2]
 800062a:	4613      	mov	r3, r2
 800062c:	803b      	strh	r3, [r7, #0]
	uint16_t width = 0, height = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	81fb      	strh	r3, [r7, #14]
 8000632:	2300      	movs	r3, #0
 8000634:	81bb      	strh	r3, [r7, #12]

	width = glyph->width;
 8000636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000638:	889b      	ldrh	r3, [r3, #4]
 800063a:	81fb      	strh	r3, [r7, #14]
	height = glyph->height;
 800063c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800063e:	88db      	ldrh	r3, [r3, #6]
 8000640:	81bb      	strh	r3, [r7, #12]

	uint16_t temp_x = x;
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t temp_y = y;
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t mask = 0x80;
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	72fb      	strb	r3, [r7, #11]
	uint8_t bit_counter = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const uint8_t *glyph_data_ptr = (const uint8_t *)(glyph->data);
 8000654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	61fb      	str	r3, [r7, #28]
	uint8_t glyph_data = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	76fb      	strb	r3, [r7, #27]
	// font bitmaps are stored in column major order (scanned from left-to-right, not the conventional top-to-bottom)
	// as font glyphs have heigher height than width, this scanning saves some storage.
	// So, we also render in left-to-right manner.

	// Along x axis (width)
	for (int i = 0; i < width; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e043      	b.n	80006ec <_st_render_glyph+0xdc>
	{
		// Along y axis (height)
		for (int j = 0; j < height; j++)
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	e031      	b.n	80006ce <_st_render_glyph+0xbe>
		{

			// load new data only when previous byte (or word, depends on glyph->dataSize) is completely traversed by the mask
			// bit_counter = 0 means glyph_data is completely traversed by the mask
			if (bit_counter == 0)
 800066a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800066e:	2b00      	cmp	r3, #0
 8000670:	d108      	bne.n	8000684 <_st_render_glyph+0x74>
			{
				glyph_data = *glyph_data_ptr++;
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	61fa      	str	r2, [r7, #28]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	76fb      	strb	r3, [r7, #27]
				bit_counter = glyph->dataSize;
 800067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800067e:	7a1b      	ldrb	r3, [r3, #8]
 8000680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			}
			// Decrement bit counter
			bit_counter--;
 8000684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000688:	3b01      	subs	r3, #1
 800068a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			//If pixel is blank
			if (glyph_data & mask)
 800068e:	7efa      	ldrb	r2, [r7, #27]
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	4013      	ands	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00a      	beq.n	80006b0 <_st_render_glyph+0xa0>
			{
				//Has background color (not transparent bg)
				if (is_bg)
 800069a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00c      	beq.n	80006bc <_st_render_glyph+0xac>
				{
					st_draw_pixel(temp_x, temp_y, back_color);
 80006a2:	883a      	ldrh	r2, [r7, #0]
 80006a4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80006a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fa55 	bl	8000b58 <st_draw_pixel>
 80006ae:	e005      	b.n	80006bc <_st_render_glyph+0xac>
			}

			//if pixel is not blank
			else
			{
				st_draw_pixel(temp_x, temp_y, fore_color);
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80006b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fa4e 	bl	8000b58 <st_draw_pixel>
			}

			glyph_data <<= 1;
 80006bc:	7efb      	ldrb	r3, [r7, #27]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	76fb      	strb	r3, [r7, #27]
			temp_y++;
 80006c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006c4:	3301      	adds	r3, #1
 80006c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		for (int j = 0; j < height; j++)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	89bb      	ldrh	r3, [r7, #12]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbc9      	blt.n	800066a <_st_render_glyph+0x5a>
		}

		//New col starts. So, row is set to initial value and col is increased by one
		temp_y = y;
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		temp_x++;
 80006da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006dc:	3301      	adds	r3, #1
 80006de:	84fb      	strh	r3, [r7, #38]	; 0x26

		//Reset the bit counter cause we're moving to next column, so we start with a new byte
		bit_counter = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < width; i++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbb7      	blt.n	8000664 <_st_render_glyph+0x54>
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	372c      	adds	r7, #44	; 0x2c
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd90      	pop	{r4, r7, pc}
	...

08000700 <_st_draw_string_main>:
 * is_bg=1 : Text will habe background color,   is_bg=0 : Text will have transparent background
 * User need NOT call it.
 */

void _st_draw_string_main(uint16_t x, uint16_t y, char *str, uint16_t fore_color, uint16_t back_color, const tFont *font, uint8_t is_bg)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af02      	add	r7, sp, #8
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	460b      	mov	r3, r1
 8000710:	81bb      	strh	r3, [r7, #12]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
	uint16_t x_temp = x;
 8000716:	89fb      	ldrh	r3, [r7, #14]
 8000718:	83fb      	strh	r3, [r7, #30]
	uint16_t y_temp = y;
 800071a:	89bb      	ldrh	r3, [r7, #12]
 800071c:	83bb      	strh	r3, [r7, #28]

	uint8_t x_padding = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	75bb      	strb	r3, [r7, #22]
	uint8_t y_padding = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	757b      	strb	r3, [r7, #21]
	const tImage *img = NULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
	uint16_t width = 0, height = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	827b      	strh	r3, [r7, #18]
 800072e:	2300      	movs	r3, #0
 8000730:	823b      	strh	r3, [r7, #16]



	while (*str)
 8000732:	e08d      	b.n	8000850 <_st_draw_string_main+0x150>
	{
		if (*str == '\n')
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d10d      	bne.n	8000758 <_st_draw_string_main+0x58>
		{
			x_temp = x;					//go to first col
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	83fb      	strh	r3, [r7, #30]
			y_temp += (font->chars[0].image->height + y_padding);	//go to next row (row height = height of space)
 8000740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	88da      	ldrh	r2, [r3, #6]
 8000748:	7d7b      	ldrb	r3, [r7, #21]
 800074a:	b29b      	uxth	r3, r3
 800074c:	4413      	add	r3, r2
 800074e:	b29a      	uxth	r2, r3
 8000750:	8bbb      	ldrh	r3, [r7, #28]
 8000752:	4413      	add	r3, r2
 8000754:	83bb      	strh	r3, [r7, #28]
 8000756:	e078      	b.n	800084a <_st_draw_string_main+0x14a>
		}

		else if (*str == '\t')
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b09      	cmp	r3, #9
 800075e:	d10d      	bne.n	800077c <_st_draw_string_main+0x7c>
		{
			x_temp += 4 * (font->chars[0].image->height + y_padding);	//Skip 4 spaces (width = width of space)
 8000760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	88db      	ldrh	r3, [r3, #6]
 8000768:	461a      	mov	r2, r3
 800076a:	7d7b      	ldrb	r3, [r7, #21]
 800076c:	4413      	add	r3, r2
 800076e:	b29b      	uxth	r3, r3
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	b29a      	uxth	r2, r3
 8000774:	8bfb      	ldrh	r3, [r7, #30]
 8000776:	4413      	add	r3, r2
 8000778:	83fb      	strh	r3, [r7, #30]
 800077a:	e066      	b.n	800084a <_st_draw_string_main+0x14a>
		}
		else
		{
			for (uint8_t i = 0; i < font->length; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	75fb      	strb	r3, [r7, #23]
 8000780:	e014      	b.n	80007ac <_st_draw_string_main+0xac>
			{
				if (font->chars[i].code == *str)
 8000782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000784:	685a      	ldr	r2, [r3, #4]
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	4413      	add	r3, r2
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	4293      	cmp	r3, r2
 8000794:	d107      	bne.n	80007a6 <_st_draw_string_main+0xa6>
				{
					img = font->chars[i].image;
 8000796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	4413      	add	r3, r2
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	61bb      	str	r3, [r7, #24]
					break;
 80007a4:	e007      	b.n	80007b6 <_st_draw_string_main+0xb6>
			for (uint8_t i = 0; i < font->length; i++)
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	3301      	adds	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]
 80007ac:	7dfa      	ldrb	r2, [r7, #23]
 80007ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dbe5      	blt.n	8000782 <_st_draw_string_main+0x82>
				}
			}
			// No glyph (img) found, so return from this function
			if (img == NULL)
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d04f      	beq.n	800085c <_st_draw_string_main+0x15c>
			{
				return;
			}

			width = img->width;
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	827b      	strh	r3, [r7, #18]
			height = img->height;
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	88db      	ldrh	r3, [r3, #6]
 80007c6:	823b      	strh	r3, [r7, #16]

			if(y_temp + (height + y_padding) > st_tftheight - 1)	//not enough space available at the bottom
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <_st_draw_string_main+0x168>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	8bba      	ldrh	r2, [r7, #28]
 80007d0:	8a39      	ldrh	r1, [r7, #16]
 80007d2:	7d7b      	ldrb	r3, [r7, #21]
 80007d4:	440b      	add	r3, r1
 80007d6:	4413      	add	r3, r2
 80007d8:	4298      	cmp	r0, r3
 80007da:	dd41      	ble.n	8000860 <_st_draw_string_main+0x160>
				return;
			if (x_temp + (width + x_padding) > st_tftwidth - 1)	//not enough space available at the right side
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <_st_draw_string_main+0x16c>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	8bfa      	ldrh	r2, [r7, #30]
 80007e4:	8a79      	ldrh	r1, [r7, #18]
 80007e6:	7dbb      	ldrb	r3, [r7, #22]
 80007e8:	440b      	add	r3, r1
 80007ea:	4413      	add	r3, r2
 80007ec:	4298      	cmp	r0, r3
 80007ee:	dc09      	bgt.n	8000804 <_st_draw_string_main+0x104>
			{
				x_temp = x;					//go to first col
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	83fb      	strh	r3, [r7, #30]
				y_temp += (height + y_padding);	//go to next row
 80007f4:	7d7b      	ldrb	r3, [r7, #21]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	8a3b      	ldrh	r3, [r7, #16]
 80007fa:	4413      	add	r3, r2
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	8bbb      	ldrh	r3, [r7, #28]
 8000800:	4413      	add	r3, r2
 8000802:	83bb      	strh	r3, [r7, #28]
			}


			if (is_bg)
 8000804:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00b      	beq.n	8000824 <_st_draw_string_main+0x124>
				_st_render_glyph(x_temp, y_temp, fore_color, back_color, img, 1);
 800080c:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800080e:	88fa      	ldrh	r2, [r7, #6]
 8000810:	8bb9      	ldrh	r1, [r7, #28]
 8000812:	8bf8      	ldrh	r0, [r7, #30]
 8000814:	2301      	movs	r3, #1
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	4623      	mov	r3, r4
 800081e:	f7ff fef7 	bl	8000610 <_st_render_glyph>
 8000822:	e00a      	b.n	800083a <_st_draw_string_main+0x13a>
			else
				_st_render_glyph(x_temp, y_temp, fore_color, back_color, img, 0);
 8000824:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	8bb9      	ldrh	r1, [r7, #28]
 800082a:	8bf8      	ldrh	r0, [r7, #30]
 800082c:	2300      	movs	r3, #0
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	4623      	mov	r3, r4
 8000836:	f7ff feeb 	bl	8000610 <_st_render_glyph>
			x_temp += (width + x_padding);		//next char position
 800083a:	7dbb      	ldrb	r3, [r7, #22]
 800083c:	b29a      	uxth	r2, r3
 800083e:	8a7b      	ldrh	r3, [r7, #18]
 8000840:	4413      	add	r3, r2
 8000842:	b29a      	uxth	r2, r3
 8000844:	8bfb      	ldrh	r3, [r7, #30]
 8000846:	4413      	add	r3, r2
 8000848:	83fb      	strh	r3, [r7, #30]
		}


		str++;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
	while (*str)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	f47f af6d 	bne.w	8000734 <_st_draw_string_main+0x34>
 800085a:	e002      	b.n	8000862 <_st_draw_string_main+0x162>
				return;
 800085c:	bf00      	nop
 800085e:	e000      	b.n	8000862 <_st_draw_string_main+0x162>
				return;
 8000860:	bf00      	nop
	}
}
 8000862:	3724      	adds	r7, #36	; 0x24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	20000002 	.word	0x20000002
 800086c:	20000000 	.word	0x20000000

08000870 <st_draw_string>:
 * @param str pointer to the string to be drawn
 * @param color 16-bit RGB565 color of the string
 * @param font Pointer to the font of the string
 */
void st_draw_string(uint16_t x, uint16_t y, char *str, uint16_t color, const tFont *font)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af04      	add	r7, sp, #16
 8000876:	60ba      	str	r2, [r7, #8]
 8000878:	461a      	mov	r2, r3
 800087a:	4603      	mov	r3, r0
 800087c:	81fb      	strh	r3, [r7, #14]
 800087e:	460b      	mov	r3, r1
 8000880:	81bb      	strh	r3, [r7, #12]
 8000882:	4613      	mov	r3, r2
 8000884:	80fb      	strh	r3, [r7, #6]
	_st_draw_string_main(x, y, str, color, 0, font, 0);
 8000886:	88fa      	ldrh	r2, [r7, #6]
 8000888:	89b9      	ldrh	r1, [r7, #12]
 800088a:	89f8      	ldrh	r0, [r7, #14]
 800088c:	2300      	movs	r3, #0
 800088e:	9302      	str	r3, [sp, #8]
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4613      	mov	r3, r2
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f7ff ff30 	bl	8000700 <_st_draw_string_main>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <st_draw_string_withbg>:
 * @param foe_color 16-bit RGB565 color of the string
 * @param back_color 16-bit RGB565 color of the string's background
 * @param font Pointer to the font of the string
 */
void st_draw_string_withbg(uint16_t x, uint16_t y, char *str, uint16_t fore_color, uint16_t back_color, const tFont *font)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	60ba      	str	r2, [r7, #8]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4603      	mov	r3, r0
 80008b4:	81fb      	strh	r3, [r7, #14]
 80008b6:	460b      	mov	r3, r1
 80008b8:	81bb      	strh	r3, [r7, #12]
 80008ba:	4613      	mov	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]
	_st_draw_string_main(x, y, str, fore_color, back_color, font, 1);
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	89b9      	ldrh	r1, [r7, #12]
 80008c2:	89f8      	ldrh	r0, [r7, #14]
 80008c4:	2301      	movs	r3, #1
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	8b3b      	ldrh	r3, [r7, #24]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	4613      	mov	r3, r2
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f7ff ff14 	bl	8000700 <_st_draw_string_main>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <st_fill_color>:
 * @param color 16-bit RGB565 color value
 * @param len 32-bit number of pixels
 */

void st_fill_color(uint16_t color, uint32_t len)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b0c9      	sub	sp, #292	; 0x124
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4602      	mov	r2, r0
 80008e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008f0:	6019      	str	r1, [r3, #0]
 80008f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008f6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80008fa:	801a      	strh	r2, [r3, #0]
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <st_fill_color+0x14c>)
 80008fe:	2204      	movs	r2, #4
 8000900:	601a      	str	r2, [r3, #0]
	uint8_t color_high = color >> 8;
 8000902:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000906:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b29b      	uxth	r3, r3
 8000910:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	uint8_t color_low = color;
 8000914:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000918:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

	#ifdef ST_USE_SPI_DMA		
		uint8_t disp_buffer[ST_BUFFER_SIZE_BYTES];
		for (uint16_t i = 0; i < ST_BUFFER_SIZE_BYTES; i = i+2)
 8000922:	2300      	movs	r3, #0
 8000924:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8000928:	e017      	b.n	800095a <st_fill_color+0x7a>
		{
			disp_buffer[i] = color_high;
 800092a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800092e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000932:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000936:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 800093a:	54d1      	strb	r1, [r2, r3]
			disp_buffer[i + 1] = color_low;
 800093c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8000940:	3301      	adds	r3, #1
 8000942:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000946:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800094a:	f897 1114 	ldrb.w	r1, [r7, #276]	; 0x114
 800094e:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < ST_BUFFER_SIZE_BYTES; i = i+2)
 8000950:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8000954:	3302      	adds	r3, #2
 8000956:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 800095a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800095e:	2bff      	cmp	r3, #255	; 0xff
 8000960:	d9e3      	bls.n	800092a <st_fill_color+0x4a>
		}

		// len is pixel count. But each pixel is 2 bytes. So, multiply by 2
		uint32_t bytes_to_write = len * 2;
 8000962:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000966:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		uint16_t transfer_size = ST_BUFFER_SIZE_BYTES;
 8000972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000976:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
		while (bytes_to_write)
 800097a:	e04b      	b.n	8000a14 <st_fill_color+0x134>
		{
			transfer_size = (bytes_to_write < transfer_size) ? bytes_to_write : transfer_size;
 800097c:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8000980:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000984:	4293      	cmp	r3, r2
 8000986:	bf28      	it	cs
 8000988:	4613      	movcs	r3, r2
 800098a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000996:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800099a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		DMA_CMAR(ST_DMA, ST_DMA_CHANNEL) = (uint32_t)data_addr;
 800099e:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <st_fill_color+0x150>)
 80009a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009a4:	6013      	str	r3, [r2, #0]
		DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL) = length;
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <st_fill_color+0x154>)
 80009a8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80009ac:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) |= DMA_CCR_EN;
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <st_fill_color+0x158>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <st_fill_color+0x158>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6013      	str	r3, [r2, #0]
		SPI_CR2(ST_SPI) |= SPI_CR2_TXDMAEN;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <st_fill_color+0x15c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <st_fill_color+0x15c>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6013      	str	r3, [r2, #0]
		while (DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL));
 80009c6:	bf00      	nop
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <st_fill_color+0x154>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1fb      	bne.n	80009c8 <st_fill_color+0xe8>
		while (!(SPI_SR(ST_SPI) & SPI_SR_TXE));
 80009d0:	bf00      	nop
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <st_fill_color+0x160>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f9      	beq.n	80009d2 <st_fill_color+0xf2>
		while (SPI_SR(ST_SPI) & SPI_SR_BSY);
 80009de:	bf00      	nop
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <st_fill_color+0x160>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f9      	bne.n	80009e0 <st_fill_color+0x100>
		SPI_CR2(ST_SPI) &= ~SPI_CR2_TXDMAEN;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <st_fill_color+0x15c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <st_fill_color+0x15c>)
 80009f2:	f023 0302 	bic.w	r3, r3, #2
 80009f6:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) &= ~DMA_CCR_EN;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <st_fill_color+0x158>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <st_fill_color+0x158>)
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]
	}
 8000a04:	bf00      	nop
			_st_write_spi_dma(disp_buffer, transfer_size);
			bytes_to_write -= transfer_size;
 8000a06:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000a0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while (bytes_to_write)
 8000a14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1af      	bne.n	800097c <st_fill_color+0x9c>
	#endif

	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_IDLE;
	#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40010810 	.word	0x40010810
 8000a30:	4002003c 	.word	0x4002003c
 8000a34:	40020034 	.word	0x40020034
 8000a38:	40020030 	.word	0x40020030
 8000a3c:	40013004 	.word	0x40013004
 8000a40:	40013008 	.word	0x40013008

08000a44 <st_fill_color_array>:
 * @param color_arr pointer to uint8_t array. Each 16-bit color is seperated into two 8-bit `high` and `low` components
 * @param bytes 32-bit number of bytes in the array (= no. of pixels x2)
 */

void st_fill_color_array(uint8_t *color_arr, uint32_t bytes)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <st_fill_color_array+0xb0>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	601a      	str	r2, [r3, #0]

	#ifdef ST_USE_SPI_DMA		
	
		// len is pixel count. But each pixel is 2 bytes. So, multiply by 2
		uint32_t bytes_to_write = bytes;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	617b      	str	r3, [r7, #20]
		uint16_t transfer_size = ST_BUFFER_SIZE_BYTES;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5c:	827b      	strh	r3, [r7, #18]
		while (bytes_to_write)
 8000a5e:	e03f      	b.n	8000ae0 <st_fill_color_array+0x9c>
		{
			transfer_size = (bytes_to_write < transfer_size) ? bytes_to_write : transfer_size;
 8000a60:	8a7a      	ldrh	r2, [r7, #18]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	4293      	cmp	r3, r2
 8000a66:	bf28      	it	cs
 8000a68:	4613      	movcs	r3, r2
 8000a6a:	827b      	strh	r3, [r7, #18]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	8a7b      	ldrh	r3, [r7, #18]
 8000a72:	817b      	strh	r3, [r7, #10]
		DMA_CMAR(ST_DMA, ST_DMA_CHANNEL) = (uint32_t)data_addr;
 8000a74:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <st_fill_color_array+0xb4>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6013      	str	r3, [r2, #0]
		DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL) = length;
 8000a7a:	4a20      	ldr	r2, [pc, #128]	; (8000afc <st_fill_color_array+0xb8>)
 8000a7c:	897b      	ldrh	r3, [r7, #10]
 8000a7e:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) |= DMA_CCR_EN;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <st_fill_color_array+0xbc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <st_fill_color_array+0xbc>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]
		SPI_CR2(ST_SPI) |= SPI_CR2_TXDMAEN;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <st_fill_color_array+0xc0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <st_fill_color_array+0xc0>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	6013      	str	r3, [r2, #0]
		while (DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL));
 8000a98:	bf00      	nop
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <st_fill_color_array+0xb8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1fb      	bne.n	8000a9a <st_fill_color_array+0x56>
		while (!(SPI_SR(ST_SPI) & SPI_SR_TXE));
 8000aa2:	bf00      	nop
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <st_fill_color_array+0xc4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f9      	beq.n	8000aa4 <st_fill_color_array+0x60>
		while (SPI_SR(ST_SPI) & SPI_SR_BSY);
 8000ab0:	bf00      	nop
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <st_fill_color_array+0xc4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f9      	bne.n	8000ab2 <st_fill_color_array+0x6e>
		SPI_CR2(ST_SPI) &= ~SPI_CR2_TXDMAEN;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <st_fill_color_array+0xc0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <st_fill_color_array+0xc0>)
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) &= ~DMA_CCR_EN;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <st_fill_color_array+0xbc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <st_fill_color_array+0xbc>)
 8000ad0:	f023 0301 	bic.w	r3, r3, #1
 8000ad4:	6013      	str	r3, [r2, #0]
	}
 8000ad6:	bf00      	nop
			_st_write_spi_dma(color_arr, transfer_size);
			bytes_to_write -= transfer_size;
 8000ad8:	8a7b      	ldrh	r3, [r7, #18]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
		while (bytes_to_write)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1bc      	bne.n	8000a60 <st_fill_color_array+0x1c>
	#endif

	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_IDLE;
	#endif
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40010810 	.word	0x40010810
 8000af8:	4002003c 	.word	0x4002003c
 8000afc:	40020034 	.word	0x40020034
 8000b00:	40020030 	.word	0x40020030
 8000b04:	40013004 	.word	0x40013004
 8000b08:	40013008 	.word	0x40013008

08000b0c <st_fill_screen>:
/**
 * Fill the entire display (screen) with `color`
 * @param color 16-bit RGB565 color
 */
void st_fill_screen(uint16_t color)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
	st_set_address_window(0, 0, st_tftwidth - 1, st_tftheight - 1);
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <st_fill_screen+0x44>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <st_fill_screen+0x48>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fc2d 	bl	8000388 <st_set_address_window>
	st_fill_color(color, (uint32_t)st_tftwidth * (uint32_t)st_tftheight);
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <st_fill_screen+0x44>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <st_fill_screen+0x48>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	fb03 f202 	mul.w	r2, r3, r2
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fecd 	bl	80008e0 <st_fill_color>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000002 	.word	0x20000002

08000b58 <st_draw_pixel>:
 * Draw a pixel at a given position with `color`
 * @param x Start col address
 * @param y Start row address
 */
void st_draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
 8000b62:	460b      	mov	r3, r1
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	807b      	strh	r3, [r7, #2]
	/*
	* Why?: This function is mainly added in the driver so that  ui libraries can use it.
	* example: LittlevGL requires user to supply a function that can draw pixel
	*/

	st_set_address_window(x, y, x, y);
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	88fa      	ldrh	r2, [r7, #6]
 8000b6e:	88b9      	ldrh	r1, [r7, #4]
 8000b70:	88f8      	ldrh	r0, [r7, #6]
 8000b72:	f7ff fc09 	bl	8000388 <st_set_address_window>
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <st_draw_pixel+0x90>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT((uint8_t)(color >> 8));
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <st_draw_pixel+0x94>)
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)color);
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <st_draw_pixel+0x94>)
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_IDLE;
	#endif
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010810 	.word	0x40010810
 8000bec:	4001300c 	.word	0x4001300c

08000bf0 <st_init>:

/**
 * Initialize the display driver
 */
void st_init()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af02      	add	r7, sp, #8
	// Set gpio clock
	ST_CONFIG_GPIO_CLOCK();
 8000bf6:	f240 3002 	movw	r0, #770	; 0x302
 8000bfa:	f000 fbf9 	bl	80013f0 <rcc_periph_clock_enable>
 8000bfe:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000c02:	f000 fbf5 	bl	80013f0 <rcc_periph_clock_enable>
 8000c06:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8000c0a:	f000 fbf1 	bl	80013f0 <rcc_periph_clock_enable>
 8000c0e:	f44f 7020 	mov.w	r0, #640	; 0x280
 8000c12:	f000 fbed 	bl	80013f0 <rcc_periph_clock_enable>
	// Configure gpio output dir and mode
	ST_CONFIG_GPIO();
 8000c16:	23a0      	movs	r3, #160	; 0xa0
 8000c18:	2202      	movs	r2, #2
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	4893      	ldr	r0, [pc, #588]	; (8000e6c <st_init+0x27c>)
 8000c1e:	f000 fab5 	bl	800118c <gpio_set_mode>
 8000c22:	231c      	movs	r3, #28
 8000c24:	2200      	movs	r2, #0
 8000c26:	2103      	movs	r1, #3
 8000c28:	4890      	ldr	r0, [pc, #576]	; (8000e6c <st_init+0x27c>)
 8000c2a:	f000 faaf 	bl	800118c <gpio_set_mode>
 8000c2e:	211c      	movs	r1, #28
 8000c30:	488e      	ldr	r0, [pc, #568]	; (8000e6c <st_init+0x27c>)
 8000c32:	f000 fada 	bl	80011ea <gpio_set>
 8000c36:	4b8e      	ldr	r3, [pc, #568]	; (8000e70 <st_init+0x280>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a8d      	ldr	r2, [pc, #564]	; (8000e70 <st_init+0x280>)
 8000c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c40:	6013      	str	r3, [r2, #0]
	// If using DMA, config SPI DMA
	#ifdef ST_USE_SPI_DMA
		ST_CONFIG_SPI_DMA();
 8000c42:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <st_init+0x284>)
 8000c44:	4a8c      	ldr	r2, [pc, #560]	; (8000e78 <st_init+0x288>)
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	4b8c      	ldr	r3, [pc, #560]	; (8000e7c <st_init+0x28c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	4b8c      	ldr	r3, [pc, #560]	; (8000e80 <st_init+0x290>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	4b8b      	ldr	r3, [pc, #556]	; (8000e84 <st_init+0x294>)
 8000c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <st_init+0x294>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a88      	ldr	r2, [pc, #544]	; (8000e84 <st_init+0x294>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b86      	ldr	r3, [pc, #536]	; (8000e84 <st_init+0x294>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a85      	ldr	r2, [pc, #532]	; (8000e84 <st_init+0x294>)
 8000c6e:	f023 0320 	bic.w	r3, r3, #32
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b83      	ldr	r3, [pc, #524]	; (8000e84 <st_init+0x294>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a82      	ldr	r2, [pc, #520]	; (8000e84 <st_init+0x294>)
 8000c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <st_init+0x294>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a7f      	ldr	r2, [pc, #508]	; (8000e84 <st_init+0x294>)
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b7d      	ldr	r3, [pc, #500]	; (8000e84 <st_init+0x294>)
 8000c8e:	4a7d      	ldr	r2, [pc, #500]	; (8000e84 <st_init+0x294>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6013      	str	r3, [r2, #0]
	#endif
	// Configure SPI settings
	ST_CONFIG_SPI();
 8000c94:	487c      	ldr	r0, [pc, #496]	; (8000e88 <st_init+0x298>)
 8000c96:	f000 fbcb 	bl	8001430 <spi_reset>
 8000c9a:	4b7c      	ldr	r3, [pc, #496]	; (8000e8c <st_init+0x29c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2202      	movs	r2, #2
 8000cac:	2100      	movs	r1, #0
 8000cae:	4876      	ldr	r0, [pc, #472]	; (8000e88 <st_init+0x298>)
 8000cb0:	f000 fbee 	bl	8001490 <spi_init_master>
 8000cb4:	4874      	ldr	r0, [pc, #464]	; (8000e88 <st_init+0x298>)
 8000cb6:	f000 fbdd 	bl	8001474 <spi_enable_software_slave_management>
 8000cba:	4873      	ldr	r0, [pc, #460]	; (8000e88 <st_init+0x298>)
 8000cbc:	f000 fbd5 	bl	800146a <spi_set_full_duplex_mode>
 8000cc0:	4871      	ldr	r0, [pc, #452]	; (8000e88 <st_init+0x298>)
 8000cc2:	f000 fbe0 	bl	8001486 <spi_set_nss_high>
 8000cc6:	4870      	ldr	r0, [pc, #448]	; (8000e88 <st_init+0x298>)
 8000cc8:	f000 fbca 	bl	8001460 <spi_enable>
		ST_CS_ACTIVE;
	#endif

	// Hardwae reset is not mandatory if software rest is done
	#ifdef ST_HAS_RST
		ST_RST_ACTIVE;
 8000ccc:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <st_init+0x2a0>)
 8000cce:	2210      	movs	r2, #16
 8000cd0:	801a      	strh	r2, [r3, #0]
		_st_fixed_delay();
 8000cd2:	f000 f937 	bl	8000f44 <_st_fixed_delay>
		ST_RST_IDLE;
 8000cd6:	4b6f      	ldr	r3, [pc, #444]	; (8000e94 <st_init+0x2a4>)
 8000cd8:	2210      	movs	r2, #16
 8000cda:	601a      	str	r2, [r3, #0]
		_st_fixed_delay();
 8000cdc:	f000 f932 	bl	8000f44 <_st_fixed_delay>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	71fb      	strb	r3, [r7, #7]
	ST_DC_CMD;
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <st_init+0x2a0>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000cea:	4a63      	ldr	r2, [pc, #396]	; (8000e78 <st_init+0x288>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
}
 8000d18:	bf00      	nop
	#endif

	_st_write_command_8bit(ST7789_SWRESET);	//1: Software reset, no args, w/delay: delay(150)
	_st_fixed_delay();
 8000d1a:	f000 f913 	bl	8000f44 <_st_fixed_delay>
 8000d1e:	2311      	movs	r3, #17
 8000d20:	723b      	strb	r3, [r7, #8]
	ST_DC_CMD;
 8000d22:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <st_init+0x2a0>)
 8000d24:	2204      	movs	r2, #4
 8000d26:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000d28:	4a53      	ldr	r2, [pc, #332]	; (8000e78 <st_init+0x288>)
 8000d2a:	7a3b      	ldrb	r3, [r7, #8]
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
}
 8000d56:	bf00      	nop

	_st_write_command_8bit(ST7789_SLPOUT);	// 2: Out of sleep mode, no args, w/delay: delay(500)
	_st_fixed_delay();
 8000d58:	f000 f8f4 	bl	8000f44 <_st_fixed_delay>
 8000d5c:	233a      	movs	r3, #58	; 0x3a
 8000d5e:	727b      	strb	r3, [r7, #9]
	ST_DC_CMD;
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <st_init+0x2a0>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000d66:	4a44      	ldr	r2, [pc, #272]	; (8000e78 <st_init+0x288>)
 8000d68:	7a7b      	ldrb	r3, [r7, #9]
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
}
 8000d94:	bf00      	nop
 8000d96:	2355      	movs	r3, #85	; 0x55
 8000d98:	72bb      	strb	r3, [r7, #10]
__attribute__((always_inline)) static inline void _st_write_data_8bit(uint8_t dat)
{
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_ACTIVE;
	#endif
	ST_DC_DAT;
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <st_init+0x2a4>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT(dat);
 8000da0:	4a35      	ldr	r2, [pc, #212]	; (8000e78 <st_init+0x288>)
 8000da2:	7abb      	ldrb	r3, [r7, #10]
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_IDLE;
	#endif
}
 8000dce:	bf00      	nop

	_st_write_command_8bit(ST7789_COLMOD);	// 3: Set color mode, 1 arg, delay: delay(10)
	_st_write_data_8bit(ST7789_COLOR_MODE_65K | ST7789_COLOR_MODE_16BIT);	// 65K color, 16-bit color
	_st_fixed_delay();
 8000dd0:	f000 f8b8 	bl	8000f44 <_st_fixed_delay>
 8000dd4:	2336      	movs	r3, #54	; 0x36
 8000dd6:	72fb      	strb	r3, [r7, #11]
	ST_DC_CMD;
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <st_init+0x2a0>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000dde:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <st_init+0x288>)
 8000de0:	7afb      	ldrb	r3, [r7, #11]
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
}
 8000e0c:	bf00      	nop
 8000e0e:	2300      	movs	r3, #0
 8000e10:	733b      	strb	r3, [r7, #12]
	ST_DC_DAT;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <st_init+0x2a4>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT(dat);
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <st_init+0x288>)
 8000e1a:	7b3b      	ldrb	r3, [r7, #12]
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
}
 8000e46:	bf00      	nop
 8000e48:	2321      	movs	r3, #33	; 0x21
 8000e4a:	737b      	strb	r3, [r7, #13]
	ST_DC_CMD;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <st_init+0x2a0>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <st_init+0x288>)
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	e016      	b.n	8000e98 <st_init+0x2a8>
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010004 	.word	0x40010004
 8000e74:	40020038 	.word	0x40020038
 8000e78:	4001300c 	.word	0x4001300c
 8000e7c:	4002003c 	.word	0x4002003c
 8000e80:	40020034 	.word	0x40020034
 8000e84:	40020030 	.word	0x40020030
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	4001301c 	.word	0x4001301c
 8000e90:	40010814 	.word	0x40010814
 8000e94:	40010810 	.word	0x40010810
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
}
 8000eb0:	bf00      	nop

	_st_write_command_8bit(ST7789_MADCTL);	// 4: Memory access ctrl (directions), 1 arg:
	_st_write_data_8bit(ST7789_MADCTL_RGB);	// RGB Color

	_st_write_command_8bit(ST7789_INVON);	// 5: Inversion ON (but why?) delay(10)
	_st_fixed_delay();
 8000eb2:	f000 f847 	bl	8000f44 <_st_fixed_delay>
 8000eb6:	2313      	movs	r3, #19
 8000eb8:	73bb      	strb	r3, [r7, #14]
	ST_DC_CMD;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <st_init+0x34c>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000ec0:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <st_init+0x350>)
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
}
 8000eee:	bf00      	nop

	_st_write_command_8bit(ST7789_NORON);	// 6: Normal display on, no args, w/delay: delay(10)
	_st_fixed_delay();
 8000ef0:	f000 f828 	bl	8000f44 <_st_fixed_delay>
 8000ef4:	2329      	movs	r3, #41	; 0x29
 8000ef6:	73fb      	strb	r3, [r7, #15]
	ST_DC_CMD;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <st_init+0x34c>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <st_init+0x350>)
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
}
 8000f2c:	bf00      	nop

	_st_write_command_8bit(ST7789_DISPON);	// 7: Main screen turn on, no args, w/delay: delay(500)
	_st_fixed_delay();
 8000f2e:	f000 f809 	bl	8000f44 <_st_fixed_delay>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010814 	.word	0x40010814
 8000f40:	4001300c 	.word	0x4001300c

08000f44 <_st_fixed_delay>:


void _st_fixed_delay()
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 5000; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	e003      	b.n	8000f58 <_st_fixed_delay+0x14>
		__asm__("nop");
 8000f50:	bf00      	nop
	for (uint16_t i = 0; i < 5000; i++)
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	80fb      	strh	r3, [r7, #6]
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d9f6      	bls.n	8000f50 <_st_fixed_delay+0xc>
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <pre_main>:
#	include "../efm32/ezr32wg/vector_chipset.c"
#elif defined(PAC55XX)
#	include "../pac55xx/vector_chipset.c"
#else

static void pre_main(void) {}
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
	...

08000f7c <reset_handler>:
		IRQ_HANDLERS
	}
};

void __attribute__ ((weak)) reset_handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <reset_handler+0xac>)
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <reset_handler+0xb0>)
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	e009      	b.n	8000fa0 <reset_handler+0x24>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	601a      	str	r2, [r3, #0]
		src++, dest++) {
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3304      	adds	r3, #4
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
	for (src = &_data_loadaddr, dest = &_data;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <reset_handler+0xb4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d3f1      	bcc.n	8000f8c <reset_handler+0x10>
	}

	while (dest < &_ebss) {
 8000fa8:	e004      	b.n	8000fb4 <reset_handler+0x38>
		*dest++ = 0;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1d1a      	adds	r2, r3, #4
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	while (dest < &_ebss) {
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <reset_handler+0xb8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d3f6      	bcc.n	8000faa <reset_handler+0x2e>
	}

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <reset_handler+0xbc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <reset_handler+0xbc>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]

	/* might be provided by platform specific vector.c */
	pre_main();
 8000fc8:	f7ff ffd1 	bl	8000f6e <pre_main>

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <reset_handler+0xc0>)
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	e005      	b.n	8000fde <reset_handler+0x62>
		(*fp)();
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <reset_handler+0xc4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d3f5      	bcc.n	8000fd2 <reset_handler+0x56>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <reset_handler+0xc8>)
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e005      	b.n	8000ff8 <reset_handler+0x7c>
		(*fp)();
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <reset_handler+0xcc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d3f5      	bcc.n	8000fec <reset_handler+0x70>
	}

	/* Call the application's entry point. */
	(void)main();
 8001000:	f7ff f8b4 	bl	800016c <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <reset_handler+0xd0>)
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	e005      	b.n	8001016 <reset_handler+0x9a>
		(*fp)();
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <reset_handler+0xd4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d3f5      	bcc.n	800100a <reset_handler+0x8e>
	}

}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08003e7c 	.word	0x08003e7c
 800102c:	20000000 	.word	0x20000000
 8001030:	20000010 	.word	0x20000010
 8001034:	20000230 	.word	0x20000230
 8001038:	e000ed14 	.word	0xe000ed14
 800103c:	08003e7c 	.word	0x08003e7c
 8001040:	08003e7c 	.word	0x08003e7c
 8001044:	08003e7c 	.word	0x08003e7c
 8001048:	08003e7c 	.word	0x08003e7c
 800104c:	08003e7c 	.word	0x08003e7c
 8001050:	08003e7c 	.word	0x08003e7c

08001054 <blocking_handler>:

void blocking_handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	while (1);
 8001058:	e7fe      	b.n	8001058 <blocking_handler+0x4>

0800105a <null_handler>:
}

void null_handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
	/* Do nothing. */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
	...

08001068 <usb_init_serial_num>:
    .iSerialNumber = USB_STRINGS_SERIAL_NUMBER_ID,
    .bNumConfigurations = sizeof(usb_config_descs) / sizeof(usb_config_descs[0]),
};

void usb_init_serial_num()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
    uint32_t id0 = DESIG_UNIQUE_ID0;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <usb_init_serial_num+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]
    uint32_t id1 = DESIG_UNIQUE_ID1;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <usb_init_serial_num+0x48>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60bb      	str	r3, [r7, #8]
    uint32_t id2 = DESIG_UNIQUE_ID2;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <usb_init_serial_num+0x4c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	607b      	str	r3, [r7, #4]

    id0 += id2;
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    put_hex(id0, serial_num, 8);
 8001088:	2208      	movs	r2, #8
 800108a:	490b      	ldr	r1, [pc, #44]	; (80010b8 <usb_init_serial_num+0x50>)
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f817 	bl	80010c0 <put_hex>
    put_hex(id1, serial_num + 8, 4);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <usb_init_serial_num+0x54>)
 8001094:	2204      	movs	r2, #4
 8001096:	4619      	mov	r1, r3
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f000 f811 	bl	80010c0 <put_hex>
    serial_num[12] = 0;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <usb_init_serial_num+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	731a      	strb	r2, [r3, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	1ffff7e8 	.word	0x1ffff7e8
 80010b0:	1ffff7ec 	.word	0x1ffff7ec
 80010b4:	1ffff7f0 	.word	0x1ffff7f0
 80010b8:	20000118 	.word	0x20000118
 80010bc:	20000120 	.word	0x20000120

080010c0 <put_hex>:

const static char HEX_DIGITS[] = "0123456789ABCDEF";

void put_hex(uint32_t value, char *buf, int len)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
    for (int idx = 0; idx < len; idx++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e00d      	b.n	80010ee <put_hex+0x2e>
    {
        buf[idx] = HEX_DIGITS[value >> 28];
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	0f1a      	lsrs	r2, r3, #28
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	440b      	add	r3, r1
 80010dc:	4909      	ldr	r1, [pc, #36]	; (8001104 <put_hex+0x44>)
 80010de:	5c8a      	ldrb	r2, [r1, r2]
 80010e0:	701a      	strb	r2, [r3, #0]
        value = value << 4;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	60fb      	str	r3, [r7, #12]
    for (int idx = 0; idx < len; idx++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbed      	blt.n	80010d2 <put_hex+0x12>
    }
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	08003e34 	.word	0x08003e34

08001108 <delay>:
{
    return millis_count;
}

void delay(uint32_t ms)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    int32_t target_time = millis_count + ms;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <delay+0x30>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
    while (target_time - (int32_t)millis_count > 0);
 800111a:	bf00      	nop
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <delay+0x30>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	dcf8      	bgt.n	800111c <delay+0x14>
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000128 	.word	0x20000128

0800113c <systick_init>:

void systick_init()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    // Initialize SysTick
    systick_set_clocksource(STK_CSR_CLKSOURCE_AHB_DIV8);
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fe77 	bl	8001e34 <systick_set_clocksource>
    systick_set_reload(rcc_ahb_frequency / 8 / 1000 - 1);
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <systick_init+0x2c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <systick_init+0x30>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0a5b      	lsrs	r3, r3, #9
 8001152:	3b01      	subs	r3, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fe65 	bl	8001e24 <systick_set_reload>

    // Enable and start
    systick_interrupt_enable();
 800115a:	f000 fe77 	bl	8001e4c <systick_interrupt_enable>
    systick_counter_enable();
 800115e:	f000 fe7d 	bl	8001e5c <systick_counter_enable>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000004 	.word	0x20000004
 800116c:	10624dd3 	.word	0x10624dd3

08001170 <sys_tick_handler>:

// System tick timer interrupt handler
void sys_tick_handler()
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    millis_count++;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <sys_tick_handler+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a03      	ldr	r2, [pc, #12]	; (8001188 <sys_tick_handler+0x18>)
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000128 	.word	0x20000128

0800118c <gpio_set_mode>:
 800118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001190:	f04f 0c0f 	mov.w	ip, #15
 8001194:	2500      	movs	r5, #0
 8001196:	6807      	ldr	r7, [r0, #0]
 8001198:	6846      	ldr	r6, [r0, #4]
 800119a:	fa43 f405 	asr.w	r4, r3, r5
 800119e:	07e4      	lsls	r4, r4, #31
 80011a0:	d51c      	bpl.n	80011dc <gpio_set_mode+0x50>
 80011a2:	2d07      	cmp	r5, #7
 80011a4:	bf94      	ite	ls
 80011a6:	46be      	movls	lr, r7
 80011a8:	46b6      	movhi	lr, r6
 80011aa:	b2ac      	uxth	r4, r5
 80011ac:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80011b0:	bf8a      	itet	hi
 80011b2:	3c20      	subhi	r4, #32
 80011b4:	b2a4      	uxthls	r4, r4
 80011b6:	b2a4      	uxthhi	r4, r4
 80011b8:	fa0c f804 	lsl.w	r8, ip, r4
 80011bc:	ea2e 0808 	bic.w	r8, lr, r8
 80011c0:	f104 0e02 	add.w	lr, r4, #2
 80011c4:	fa02 fe0e 	lsl.w	lr, r2, lr
 80011c8:	fa01 f404 	lsl.w	r4, r1, r4
 80011cc:	ea4e 0404 	orr.w	r4, lr, r4
 80011d0:	ea44 0408 	orr.w	r4, r4, r8
 80011d4:	2d07      	cmp	r5, #7
 80011d6:	bf94      	ite	ls
 80011d8:	4627      	movls	r7, r4
 80011da:	4626      	movhi	r6, r4
 80011dc:	3501      	adds	r5, #1
 80011de:	2d10      	cmp	r5, #16
 80011e0:	d1db      	bne.n	800119a <gpio_set_mode+0xe>
 80011e2:	6007      	str	r7, [r0, #0]
 80011e4:	6046      	str	r6, [r0, #4]
 80011e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011ea <gpio_set>:
 80011ea:	6101      	str	r1, [r0, #16]
 80011ec:	4770      	bx	lr

080011ee <gpio_clear>:
 80011ee:	0409      	lsls	r1, r1, #16
 80011f0:	6101      	str	r1, [r0, #16]
 80011f2:	4770      	bx	lr

080011f4 <rcc_osc_on.part.0>:
 80011f4:	4a02      	ldr	r2, [pc, #8]	; (8001200 <rcc_osc_on.part.0+0xc>)
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000

08001204 <rcc_is_osc_ready>:
 8001204:	2806      	cmp	r0, #6
 8001206:	d822      	bhi.n	800124e <rcc_is_osc_ready+0x4a>
 8001208:	e8df f000 	tbb	[pc, r0]
 800120c:	130e0904 	.word	0x130e0904
 8001210:	1d18      	.short	0x1d18
 8001212:	1f          	.byte	0x1f
 8001213:	00          	.byte	0x00
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <rcc_is_osc_ready+0x50>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f3c0 6040 	ubfx	r0, r0, #25, #1
 800121c:	4770      	bx	lr
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <rcc_is_osc_ready+0x50>)
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001226:	4770      	bx	lr
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <rcc_is_osc_ready+0x50>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	f3c0 7040 	ubfx	r0, r0, #29, #1
 8001230:	4770      	bx	lr
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <rcc_is_osc_ready+0x50>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800123a:	4770      	bx	lr
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <rcc_is_osc_ready+0x50>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001244:	4770      	bx	lr
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <rcc_is_osc_ready+0x54>)
 8001248:	e7f9      	b.n	800123e <rcc_is_osc_ready+0x3a>
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <rcc_is_osc_ready+0x58>)
 800124c:	e7f7      	b.n	800123e <rcc_is_osc_ready+0x3a>
 800124e:	2000      	movs	r0, #0
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	40021020 	.word	0x40021020
 800125c:	40021024 	.word	0x40021024

08001260 <rcc_wait_for_osc_ready>:
 8001260:	4602      	mov	r2, r0
 8001262:	b508      	push	{r3, lr}
 8001264:	4610      	mov	r0, r2
 8001266:	f7ff ffcd 	bl	8001204 <rcc_is_osc_ready>
 800126a:	2800      	cmp	r0, #0
 800126c:	d0fa      	beq.n	8001264 <rcc_wait_for_osc_ready+0x4>
 800126e:	bd08      	pop	{r3, pc}

08001270 <rcc_osc_on>:
 8001270:	2806      	cmp	r0, #6
 8001272:	d80c      	bhi.n	800128e <rcc_osc_on+0x1e>
 8001274:	e8df f000 	tbb	[pc, r0]
 8001278:	110c0604 	.word	0x110c0604
 800127c:	1b16      	.short	0x1b16
 800127e:	1d          	.byte	0x1d
 800127f:	00          	.byte	0x00
 8001280:	f7ff bfb8 	b.w	80011f4 <rcc_osc_on.part.0>
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <rcc_osc_on+0x48>)
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4770      	bx	lr
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <rcc_osc_on+0x48>)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	e7f8      	b.n	800128c <rcc_osc_on+0x1c>
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <rcc_osc_on+0x48>)
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	e7f3      	b.n	800128c <rcc_osc_on+0x1c>
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <rcc_osc_on+0x48>)
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	e7ee      	b.n	800128c <rcc_osc_on+0x1c>
 80012ae:	4a03      	ldr	r2, [pc, #12]	; (80012bc <rcc_osc_on+0x4c>)
 80012b0:	e7f9      	b.n	80012a6 <rcc_osc_on+0x36>
 80012b2:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <rcc_osc_on+0x50>)
 80012b4:	e7f7      	b.n	80012a6 <rcc_osc_on+0x36>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021020 	.word	0x40021020
 80012c0:	40021024 	.word	0x40021024

080012c4 <rcc_set_sysclk_source>:
 80012c4:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <rcc_set_sysclk_source+0x10>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f023 0303 	bic.w	r3, r3, #3
 80012cc:	4303      	orrs	r3, r0
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021004 	.word	0x40021004

080012d8 <rcc_set_pll_multiplication_factor>:
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <rcc_set_pll_multiplication_factor+0x10>)
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80012e0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4770      	bx	lr
 80012e8:	40021004 	.word	0x40021004

080012ec <rcc_set_pll_source>:
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <rcc_set_pll_source+0x10>)
 80012ee:	6813      	ldr	r3, [r2, #0]
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4770      	bx	lr
 80012fc:	40021004 	.word	0x40021004

08001300 <rcc_set_pllxtpre>:
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <rcc_set_pllxtpre+0x10>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001308:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4770      	bx	lr
 8001310:	40021004 	.word	0x40021004

08001314 <rcc_set_adcpre>:
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <rcc_set_adcpre+0x10>)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800131c:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4770      	bx	lr
 8001324:	40021004 	.word	0x40021004

08001328 <rcc_set_ppre2>:
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <rcc_set_ppre2+0x10>)
 800132a:	6813      	ldr	r3, [r2, #0]
 800132c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001330:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4770      	bx	lr
 8001338:	40021004 	.word	0x40021004

0800133c <rcc_set_ppre1>:
 800133c:	4a03      	ldr	r2, [pc, #12]	; (800134c <rcc_set_ppre1+0x10>)
 800133e:	6813      	ldr	r3, [r2, #0]
 8001340:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001344:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4770      	bx	lr
 800134c:	40021004 	.word	0x40021004

08001350 <rcc_set_hpre>:
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <rcc_set_hpre+0x10>)
 8001352:	6813      	ldr	r3, [r2, #0]
 8001354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001358:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4770      	bx	lr
 8001360:	40021004 	.word	0x40021004

08001364 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
 8001364:	b508      	push	{r3, lr}
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff ff82 	bl	8001270 <rcc_osc_on>
 800136c:	2004      	movs	r0, #4
 800136e:	f7ff ff77 	bl	8001260 <rcc_wait_for_osc_ready>
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff ffa6 	bl	80012c4 <rcc_set_sysclk_source>
 8001378:	2003      	movs	r0, #3
 800137a:	f7ff ff79 	bl	8001270 <rcc_osc_on>
 800137e:	2003      	movs	r0, #3
 8001380:	f7ff ff6e 	bl	8001260 <rcc_wait_for_osc_ready>
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff ff9d 	bl	80012c4 <rcc_set_sysclk_source>
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ffe0 	bl	8001350 <rcc_set_hpre>
 8001390:	2003      	movs	r0, #3
 8001392:	f7ff ffbf 	bl	8001314 <rcc_set_adcpre>
 8001396:	2004      	movs	r0, #4
 8001398:	f7ff ffd0 	bl	800133c <rcc_set_ppre1>
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ffc3 	bl	8001328 <rcc_set_ppre2>
 80013a2:	2002      	movs	r0, #2
 80013a4:	f000 fd80 	bl	8001ea8 <flash_set_ws>
 80013a8:	2007      	movs	r0, #7
 80013aa:	f7ff ff95 	bl	80012d8 <rcc_set_pll_multiplication_factor>
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff ff9c 	bl	80012ec <rcc_set_pll_source>
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ffa3 	bl	8001300 <rcc_set_pllxtpre>
 80013ba:	f7ff ff1b 	bl	80011f4 <rcc_osc_on.part.0>
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ff4e 	bl	8001260 <rcc_wait_for_osc_ready>
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff ff7d 	bl	80012c4 <rcc_set_sysclk_source>
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x78>)
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x7c>)
 80013ce:	4905      	ldr	r1, [pc, #20]	; (80013e4 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x80>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x84>)
 80013d4:	6011      	str	r1, [r2, #0]
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x88>)
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	bd08      	pop	{r3, pc}
 80013dc:	044aa200 	.word	0x044aa200
 80013e0:	20000004 	.word	0x20000004
 80013e4:	02255100 	.word	0x02255100
 80013e8:	20000008 	.word	0x20000008
 80013ec:	2000000c 	.word	0x2000000c

080013f0 <rcc_periph_clock_enable>:
 80013f0:	2201      	movs	r2, #1
 80013f2:	0943      	lsrs	r3, r0, #5
 80013f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	f000 001f 	and.w	r0, r0, #31
 8001402:	fa02 f000 	lsl.w	r0, r2, r0
 8001406:	4308      	orrs	r0, r1
 8001408:	6018      	str	r0, [r3, #0]
 800140a:	4770      	bx	lr

0800140c <rcc_periph_reset_pulse>:
 800140c:	2201      	movs	r2, #1
 800140e:	0943      	lsrs	r3, r0, #5
 8001410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001414:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001418:	6819      	ldr	r1, [r3, #0]
 800141a:	f000 001f 	and.w	r0, r0, #31
 800141e:	fa02 f000 	lsl.w	r0, r2, r0
 8001422:	4301      	orrs	r1, r0
 8001424:	6019      	str	r1, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	ea22 0000 	bic.w	r0, r2, r0
 800142c:	6018      	str	r0, [r3, #0]
 800142e:	4770      	bx	lr

08001430 <spi_reset>:
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <spi_reset+0x2c>)
 8001432:	4298      	cmp	r0, r3
 8001434:	d00e      	beq.n	8001454 <spi_reset+0x24>
 8001436:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 800143a:	4298      	cmp	r0, r3
 800143c:	d006      	beq.n	800144c <spi_reset+0x1c>
 800143e:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8001442:	4298      	cmp	r0, r3
 8001444:	d109      	bne.n	800145a <spi_reset+0x2a>
 8001446:	f240 200e 	movw	r0, #526	; 0x20e
 800144a:	e001      	b.n	8001450 <spi_reset+0x20>
 800144c:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 8001450:	f7ff bfdc 	b.w	800140c <rcc_periph_reset_pulse>
 8001454:	f240 200f 	movw	r0, #527	; 0x20f
 8001458:	e7fa      	b.n	8001450 <spi_reset+0x20>
 800145a:	4770      	bx	lr
 800145c:	40003c00 	.word	0x40003c00

08001460 <spi_enable>:
 8001460:	6803      	ldr	r3, [r0, #0]
 8001462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001466:	6003      	str	r3, [r0, #0]
 8001468:	4770      	bx	lr

0800146a <spi_set_full_duplex_mode>:
 800146a:	6803      	ldr	r3, [r0, #0]
 800146c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001470:	6003      	str	r3, [r0, #0]
 8001472:	4770      	bx	lr

08001474 <spi_enable_software_slave_management>:
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6003      	str	r3, [r0, #0]
 800147c:	6843      	ldr	r3, [r0, #4]
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	6043      	str	r3, [r0, #4]
 8001484:	4770      	bx	lr

08001486 <spi_set_nss_high>:
 8001486:	6803      	ldr	r3, [r0, #0]
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6003      	str	r3, [r0, #0]
 800148e:	4770      	bx	lr

08001490 <spi_init_master>:
 8001490:	b530      	push	{r4, r5, lr}
 8001492:	6804      	ldr	r4, [r0, #0]
 8001494:	9d04      	ldr	r5, [sp, #16]
 8001496:	f404 5441 	and.w	r4, r4, #12352	; 0x3040
 800149a:	432c      	orrs	r4, r5
 800149c:	9d03      	ldr	r5, [sp, #12]
 800149e:	432c      	orrs	r4, r5
 80014a0:	431c      	orrs	r4, r3
 80014a2:	4314      	orrs	r4, r2
 80014a4:	6843      	ldr	r3, [r0, #4]
 80014a6:	430c      	orrs	r4, r1
 80014a8:	f044 0404 	orr.w	r4, r4, #4
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6043      	str	r3, [r0, #4]
 80014b2:	6004      	str	r4, [r0, #0]
 80014b4:	2000      	movs	r0, #0
 80014b6:	bd30      	pop	{r4, r5, pc}

080014b8 <usbd_init>:
 80014b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014bc:	461e      	mov	r6, r3
 80014be:	6803      	ldr	r3, [r0, #0]
 80014c0:	4605      	mov	r5, r0
 80014c2:	4688      	mov	r8, r1
 80014c4:	4617      	mov	r7, r2
 80014c6:	4798      	blx	r3
 80014c8:	9b06      	ldr	r3, [sp, #24]
 80014ca:	e9c0 8700 	strd	r8, r7, [r0]
 80014ce:	60c3      	str	r3, [r0, #12]
 80014d0:	9b07      	ldr	r3, [sp, #28]
 80014d2:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
 80014d6:	6103      	str	r3, [r0, #16]
 80014d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80014dc:	6086      	str	r6, [r0, #8]
 80014de:	8283      	strh	r3, [r0, #20]
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <usbd_init+0x44>)
 80014e2:	6703      	str	r3, [r0, #112]	; 0x70
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <usbd_init+0x48>)
 80014e6:	66c3      	str	r3, [r0, #108]	; 0x6c
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <usbd_init+0x4c>)
 80014ea:	6683      	str	r3, [r0, #104]	; 0x68
 80014ec:	2300      	movs	r3, #0
 80014ee:	e9c0 3332 	strd	r3, r3, [r0, #200]	; 0xc8
 80014f2:	e9c0 3334 	strd	r3, r3, [r0, #208]	; 0xd0
 80014f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014fa:	bf00      	nop
 80014fc:	08001719 	.word	0x08001719
 8001500:	08001779 	.word	0x08001779
 8001504:	080017fb 	.word	0x080017fb

08001508 <usbd_poll>:
 8001508:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	4718      	bx	r3

08001510 <usbd_ep_setup>:
 8001510:	b410      	push	{r4}
 8001512:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001516:	68a4      	ldr	r4, [r4, #8]
 8001518:	46a4      	mov	ip, r4
 800151a:	bc10      	pop	{r4}
 800151c:	4760      	bx	ip

0800151e <_usbd_reset>:
 800151e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001520:	2500      	movs	r5, #0
 8001522:	4604      	mov	r4, r0
 8001524:	6803      	ldr	r3, [r0, #0]
 8001526:	82c5      	strh	r5, [r0, #22]
 8001528:	79db      	ldrb	r3, [r3, #7]
 800152a:	462a      	mov	r2, r5
 800152c:	4629      	mov	r1, r5
 800152e:	9500      	str	r5, [sp, #0]
 8001530:	f7ff ffee 	bl	8001510 <usbd_ep_setup>
 8001534:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001538:	4629      	mov	r1, r5
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4620      	mov	r0, r4
 800153e:	4798      	blx	r3
 8001540:	69e3      	ldr	r3, [r4, #28]
 8001542:	b11b      	cbz	r3, 800154c <_usbd_reset+0x2e>
 8001544:	b003      	add	sp, #12
 8001546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800154a:	4718      	bx	r3
 800154c:	b003      	add	sp, #12
 800154e:	bd30      	pop	{r4, r5, pc}

08001550 <usbd_ep_write_packet>:
 8001550:	b410      	push	{r4}
 8001552:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001556:	69e4      	ldr	r4, [r4, #28]
 8001558:	46a4      	mov	ip, r4
 800155a:	bc10      	pop	{r4}
 800155c:	4760      	bx	ip

0800155e <usbd_ep_read_packet>:
 800155e:	b410      	push	{r4}
 8001560:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001564:	6a24      	ldr	r4, [r4, #32]
 8001566:	46a4      	mov	ip, r4
 8001568:	bc10      	pop	{r4}
 800156a:	4760      	bx	ip

0800156c <usbd_ep_stall_set>:
 800156c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	4718      	bx	r3

08001574 <usbd_ep_stall_get>:
 8001574:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4718      	bx	r3

0800157c <usbd_ep_nak_set>:
 800157c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4718      	bx	r3

08001584 <usb_control_send_chunk>:
 8001584:	b510      	push	{r4, lr}
 8001586:	6803      	ldr	r3, [r0, #0]
 8001588:	4604      	mov	r4, r0
 800158a:	79d9      	ldrb	r1, [r3, #7]
 800158c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800158e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001590:	4299      	cmp	r1, r3
 8001592:	d20f      	bcs.n	80015b4 <usb_control_send_chunk+0x30>
 8001594:	460b      	mov	r3, r1
 8001596:	2100      	movs	r1, #0
 8001598:	f7ff ffda 	bl	8001550 <usbd_ep_write_packet>
 800159c:	2302      	movs	r3, #2
 800159e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80015a6:	79d9      	ldrb	r1, [r3, #7]
 80015a8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80015aa:	440a      	add	r2, r1
 80015ac:	1a5b      	subs	r3, r3, r1
 80015ae:	63a2      	str	r2, [r4, #56]	; 0x38
 80015b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	2100      	movs	r1, #0
 80015b6:	f7ff ffcb 	bl	8001550 <usbd_ep_write_packet>
 80015ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2302      	movne	r3, #2
 80015c4:	2303      	moveq	r3, #3
 80015c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80015ca:	2300      	movs	r3, #0
 80015cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80015d0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80015d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80015d4:	e7ed      	b.n	80015b2 <usb_control_send_chunk+0x2e>

080015d6 <usb_control_request_dispatch>:
 80015d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015da:	4604      	mov	r4, r0
 80015dc:	460e      	mov	r6, r1
 80015de:	4605      	mov	r5, r0
 80015e0:	f100 0a20 	add.w	sl, r0, #32
 80015e4:	f100 0838 	add.w	r8, r0, #56	; 0x38
 80015e8:	f100 0b3c 	add.w	fp, r0, #60	; 0x3c
 80015ec:	f100 0940 	add.w	r9, r0, #64	; 0x40
 80015f0:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80015f2:	b947      	cbnz	r7, 8001606 <usb_control_request_dispatch+0x30>
 80015f4:	465b      	mov	r3, fp
 80015f6:	4642      	mov	r2, r8
 80015f8:	4631      	mov	r1, r6
 80015fa:	4620      	mov	r0, r4
 80015fc:	b003      	add	sp, #12
 80015fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001602:	f000 bbbf 	b.w	8001d84 <_usbd_standard_request>
 8001606:	7831      	ldrb	r1, [r6, #0]
 8001608:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
 800160c:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8001610:	4011      	ands	r1, r2
 8001612:	428b      	cmp	r3, r1
 8001614:	d003      	beq.n	800161e <usb_control_request_dispatch+0x48>
 8001616:	3508      	adds	r5, #8
 8001618:	4555      	cmp	r5, sl
 800161a:	d1e9      	bne.n	80015f0 <usb_control_request_dispatch+0x1a>
 800161c:	e7ea      	b.n	80015f4 <usb_control_request_dispatch+0x1e>
 800161e:	465b      	mov	r3, fp
 8001620:	4642      	mov	r2, r8
 8001622:	4631      	mov	r1, r6
 8001624:	4620      	mov	r0, r4
 8001626:	f8cd 9000 	str.w	r9, [sp]
 800162a:	47b8      	blx	r7
 800162c:	2801      	cmp	r0, #1
 800162e:	d8f2      	bhi.n	8001616 <usb_control_request_dispatch+0x40>
 8001630:	b003      	add	sp, #12
 8001632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001636 <stall_transaction>:
 8001636:	b510      	push	{r4, lr}
 8001638:	2201      	movs	r2, #1
 800163a:	2100      	movs	r1, #0
 800163c:	4604      	mov	r4, r0
 800163e:	f7ff ff95 	bl	800156c <usbd_ep_stall_set>
 8001642:	2300      	movs	r3, #0
 8001644:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001648:	bd10      	pop	{r4, pc}

0800164a <usb_control_recv_chunk>:
 800164a:	b570      	push	{r4, r5, r6, lr}
 800164c:	6803      	ldr	r3, [r0, #0]
 800164e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001650:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001652:	79db      	ldrb	r3, [r3, #7]
 8001654:	1aa4      	subs	r4, r4, r2
 8001656:	429c      	cmp	r4, r3
 8001658:	bfa8      	it	ge
 800165a:	461c      	movge	r4, r3
 800165c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800165e:	b2a6      	uxth	r6, r4
 8001660:	440a      	add	r2, r1
 8001662:	4633      	mov	r3, r6
 8001664:	2100      	movs	r1, #0
 8001666:	4605      	mov	r5, r0
 8001668:	f7ff ff79 	bl	800155e <usbd_ep_read_packet>
 800166c:	4286      	cmp	r6, r0
 800166e:	d005      	beq.n	800167c <usb_control_recv_chunk+0x32>
 8001670:	4628      	mov	r0, r5
 8001672:	f7ff ffe0 	bl	8001636 <stall_transaction>
 8001676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 800167e:	b2a0      	uxth	r0, r4
 8001680:	441e      	add	r6, r3
 8001682:	87ae      	strh	r6, [r5, #60]	; 0x3c
 8001684:	e7f9      	b.n	800167a <usb_control_recv_chunk+0x30>

08001686 <usb_control_setup_read>:
 8001686:	b538      	push	{r3, r4, r5, lr}
 8001688:	6903      	ldr	r3, [r0, #16]
 800168a:	4604      	mov	r4, r0
 800168c:	6383      	str	r3, [r0, #56]	; 0x38
 800168e:	798b      	ldrb	r3, [r1, #6]
 8001690:	79ca      	ldrb	r2, [r1, #7]
 8001692:	460d      	mov	r5, r1
 8001694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001698:	8783      	strh	r3, [r0, #60]	; 0x3c
 800169a:	f7ff ff9c 	bl	80015d6 <usb_control_request_dispatch>
 800169e:	b300      	cbz	r0, 80016e2 <usb_control_setup_read+0x5c>
 80016a0:	88eb      	ldrh	r3, [r5, #6]
 80016a2:	b1ab      	cbz	r3, 80016d0 <usb_control_setup_read+0x4a>
 80016a4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	79c9      	ldrb	r1, [r1, #7]
 80016ac:	d90e      	bls.n	80016cc <usb_control_setup_read+0x46>
 80016ae:	b132      	cbz	r2, 80016be <usb_control_setup_read+0x38>
 80016b0:	fbb2 f3f1 	udiv	r3, r2, r1
 80016b4:	fb01 2213 	mls	r2, r1, r3, r2
 80016b8:	fab2 f282 	clz	r2, r2
 80016bc:	0952      	lsrs	r2, r2, #5
 80016be:	4620      	mov	r0, r4
 80016c0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80016c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016c8:	f7ff bf5c 	b.w	8001584 <usb_control_send_chunk>
 80016cc:	2200      	movs	r2, #0
 80016ce:	e7f6      	b.n	80016be <usb_control_setup_read+0x38>
 80016d0:	461a      	mov	r2, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff ff3b 	bl	8001550 <usbd_ep_write_packet>
 80016da:	2304      	movs	r3, #4
 80016dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80016e0:	bd38      	pop	{r3, r4, r5, pc}
 80016e2:	4620      	mov	r0, r4
 80016e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016e8:	f7ff bfa5 	b.w	8001636 <stall_transaction>

080016ec <usbd_register_control_callback>:
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	2400      	movs	r4, #0
 80016f0:	f100 0648 	add.w	r6, r0, #72	; 0x48
 80016f4:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 80016f8:	b12d      	cbz	r5, 8001706 <usbd_register_control_callback+0x1a>
 80016fa:	3401      	adds	r4, #1
 80016fc:	2c04      	cmp	r4, #4
 80016fe:	d1f9      	bne.n	80016f4 <usbd_register_control_callback+0x8>
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001704:	bd70      	pop	{r4, r5, r6, pc}
 8001706:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800170a:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
 800170e:	4628      	mov	r0, r5
 8001710:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8001714:	64a3      	str	r3, [r4, #72]	; 0x48
 8001716:	e7f5      	b.n	8001704 <usbd_register_control_callback+0x18>

08001718 <_usbd_control_setup>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	2500      	movs	r5, #0
 800171c:	4604      	mov	r4, r0
 800171e:	2201      	movs	r2, #1
 8001720:	4629      	mov	r1, r5
 8001722:	6405      	str	r5, [r0, #64]	; 0x40
 8001724:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8001728:	f7ff ff28 	bl	800157c <usbd_ep_nak_set>
 800172c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800172e:	b92a      	cbnz	r2, 800173c <_usbd_control_setup+0x24>
 8001730:	4631      	mov	r1, r6
 8001732:	4620      	mov	r0, r4
 8001734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001738:	f7ff bfa5 	b.w	8001686 <usb_control_setup_read>
 800173c:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8001740:	2b00      	cmp	r3, #0
 8001742:	dbf5      	blt.n	8001730 <_usbd_control_setup+0x18>
 8001744:	8aa3      	ldrh	r3, [r4, #20]
 8001746:	4293      	cmp	r3, r2
 8001748:	d204      	bcs.n	8001754 <_usbd_control_setup+0x3c>
 800174a:	4620      	mov	r0, r4
 800174c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001750:	f7ff bf71 	b.w	8001636 <stall_transaction>
 8001754:	6923      	ldr	r3, [r4, #16]
 8001756:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8001758:	63a3      	str	r3, [r4, #56]	; 0x38
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	4629      	mov	r1, r5
 800175e:	79db      	ldrb	r3, [r3, #7]
 8001760:	4620      	mov	r0, r4
 8001762:	4293      	cmp	r3, r2
 8001764:	bf34      	ite	cc
 8001766:	2305      	movcc	r3, #5
 8001768:	2306      	movcs	r3, #6
 800176a:	462a      	mov	r2, r5
 800176c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001774:	f7ff bf02 	b.w	800157c <usbd_ep_nak_set>

08001778 <_usbd_control_out>:
 8001778:	b510      	push	{r4, lr}
 800177a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800177e:	4604      	mov	r4, r0
 8001780:	2b06      	cmp	r3, #6
 8001782:	d012      	beq.n	80017aa <_usbd_control_out+0x32>
 8001784:	2b07      	cmp	r3, #7
 8001786:	d027      	beq.n	80017d8 <_usbd_control_out+0x60>
 8001788:	2b05      	cmp	r3, #5
 800178a:	d121      	bne.n	80017d0 <_usbd_control_out+0x58>
 800178c:	f7ff ff5d 	bl	800164a <usb_control_recv_chunk>
 8001790:	2800      	cmp	r0, #0
 8001792:	db09      	blt.n	80017a8 <_usbd_control_out+0x30>
 8001794:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8001796:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	79d2      	ldrb	r2, [r2, #7]
 800179e:	4293      	cmp	r3, r2
 80017a0:	dc02      	bgt.n	80017a8 <_usbd_control_out+0x30>
 80017a2:	2306      	movs	r3, #6
 80017a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80017a8:	bd10      	pop	{r4, pc}
 80017aa:	f7ff ff4e 	bl	800164a <usb_control_recv_chunk>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	dbfa      	blt.n	80017a8 <_usbd_control_out+0x30>
 80017b2:	4620      	mov	r0, r4
 80017b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80017b8:	f7ff ff0d 	bl	80015d6 <usb_control_request_dispatch>
 80017bc:	b138      	cbz	r0, 80017ce <_usbd_control_out+0x56>
 80017be:	2300      	movs	r3, #0
 80017c0:	4620      	mov	r0, r4
 80017c2:	461a      	mov	r2, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fec3 	bl	8001550 <usbd_ep_write_packet>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e7ea      	b.n	80017a4 <_usbd_control_out+0x2c>
 80017ce:	4620      	mov	r0, r4
 80017d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d4:	f7ff bf2f 	b.w	8001636 <stall_transaction>
 80017d8:	2300      	movs	r3, #0
 80017da:	461a      	mov	r2, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff febe 	bl	800155e <usbd_ep_read_packet>
 80017e2:	2300      	movs	r3, #0
 80017e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80017e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ea:	b11b      	cbz	r3, 80017f4 <_usbd_control_out+0x7c>
 80017ec:	4620      	mov	r0, r4
 80017ee:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80017f2:	4798      	blx	r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	6423      	str	r3, [r4, #64]	; 0x40
 80017f8:	e7d6      	b.n	80017a8 <_usbd_control_out+0x30>

080017fa <_usbd_control_in>:
 80017fa:	b510      	push	{r4, lr}
 80017fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001800:	4604      	mov	r4, r0
 8001802:	2b03      	cmp	r3, #3
 8001804:	d007      	beq.n	8001816 <_usbd_control_in+0x1c>
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00e      	beq.n	8001828 <_usbd_control_in+0x2e>
 800180a:	2b02      	cmp	r3, #2
 800180c:	d123      	bne.n	8001856 <_usbd_control_in+0x5c>
 800180e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001812:	f7ff beb7 	b.w	8001584 <usb_control_send_chunk>
 8001816:	2307      	movs	r3, #7
 8001818:	2200      	movs	r2, #0
 800181a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800181e:	4611      	mov	r1, r2
 8001820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001824:	f7ff beaa 	b.w	800157c <usbd_ep_nak_set>
 8001828:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800182a:	b113      	cbz	r3, 8001832 <_usbd_control_in+0x38>
 800182c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001830:	4798      	blx	r3
 8001832:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001836:	b953      	cbnz	r3, 800184e <_usbd_control_in+0x54>
 8001838:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800183c:	2b05      	cmp	r3, #5
 800183e:	d106      	bne.n	800184e <_usbd_control_in+0x54>
 8001840:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001842:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001846:	4620      	mov	r0, r4
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	4798      	blx	r3
 800184e:	2300      	movs	r3, #0
 8001850:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001854:	bd10      	pop	{r4, pc}
 8001856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800185a:	f7ff beec 	b.w	8001636 <stall_transaction>

0800185e <usb_standard_set_address>:
 800185e:	b510      	push	{r4, lr}
 8001860:	780b      	ldrb	r3, [r1, #0]
 8001862:	b973      	cbnz	r3, 8001882 <usb_standard_set_address+0x24>
 8001864:	884c      	ldrh	r4, [r1, #2]
 8001866:	2c7f      	cmp	r4, #127	; 0x7f
 8001868:	d80c      	bhi.n	8001884 <usb_standard_set_address+0x26>
 800186a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800186e:	7584      	strb	r4, [r0, #22]
 8001870:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001874:	b11a      	cbz	r2, 800187e <usb_standard_set_address+0x20>
 8001876:	8849      	ldrh	r1, [r1, #2]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	4798      	blx	r3
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <usb_standard_set_address+0x26>
 8001882:	2300      	movs	r3, #0
 8001884:	4618      	mov	r0, r3
 8001886:	bd10      	pop	{r4, pc}

08001888 <usb_standard_set_configuration>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	460d      	mov	r5, r1
 800188c:	8849      	ldrh	r1, [r1, #2]
 800188e:	4604      	mov	r4, r0
 8001890:	b179      	cbz	r1, 80018b2 <usb_standard_set_configuration+0x2a>
 8001892:	6803      	ldr	r3, [r0, #0]
 8001894:	260d      	movs	r6, #13
 8001896:	7c58      	ldrb	r0, [r3, #17]
 8001898:	2300      	movs	r3, #0
 800189a:	4298      	cmp	r0, r3
 800189c:	d801      	bhi.n	80018a2 <usb_standard_set_configuration+0x1a>
 800189e:	2000      	movs	r0, #0
 80018a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a2:	6862      	ldr	r2, [r4, #4]
 80018a4:	fb06 2203 	mla	r2, r6, r3, r2
 80018a8:	7952      	ldrb	r2, [r2, #5]
 80018aa:	428a      	cmp	r2, r1
 80018ac:	d003      	beq.n	80018b6 <usb_standard_set_configuration+0x2e>
 80018ae:	3301      	adds	r3, #1
 80018b0:	e7f3      	b.n	800189a <usb_standard_set_configuration+0x12>
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	75e3      	strb	r3, [r4, #23]
 80018bc:	b94b      	cbnz	r3, 80018d2 <usb_standard_set_configuration+0x4a>
 80018be:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80018c2:	4620      	mov	r0, r4
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4798      	blx	r3
 80018c8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80018cc:	b99b      	cbnz	r3, 80018f6 <usb_standard_set_configuration+0x6e>
 80018ce:	2001      	movs	r0, #1
 80018d0:	e7e6      	b.n	80018a0 <usb_standard_set_configuration+0x18>
 80018d2:	220d      	movs	r2, #13
 80018d4:	4353      	muls	r3, r2
 80018d6:	6862      	ldr	r2, [r4, #4]
 80018d8:	3b0d      	subs	r3, #13
 80018da:	4413      	add	r3, r2
 80018dc:	2200      	movs	r2, #0
 80018de:	4610      	mov	r0, r2
 80018e0:	7919      	ldrb	r1, [r3, #4]
 80018e2:	4291      	cmp	r1, r2
 80018e4:	d9eb      	bls.n	80018be <usb_standard_set_configuration+0x36>
 80018e6:	f8d3 1009 	ldr.w	r1, [r3, #9]
 80018ea:	0116      	lsls	r6, r2, #4
 80018ec:	5871      	ldr	r1, [r6, r1]
 80018ee:	b101      	cbz	r1, 80018f2 <usb_standard_set_configuration+0x6a>
 80018f0:	7008      	strb	r0, [r1, #0]
 80018f2:	3201      	adds	r2, #1
 80018f4:	e7f4      	b.n	80018e0 <usb_standard_set_configuration+0x58>
 80018f6:	2300      	movs	r3, #0
 80018f8:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 80018fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80018fe:	6523      	str	r3, [r4, #80]	; 0x50
 8001900:	65a3      	str	r3, [r4, #88]	; 0x58
 8001902:	6623      	str	r3, [r4, #96]	; 0x60
 8001904:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
 8001908:	f856 3b04 	ldr.w	r3, [r6], #4
 800190c:	b113      	cbz	r3, 8001914 <usb_standard_set_configuration+0x8c>
 800190e:	4620      	mov	r0, r4
 8001910:	8869      	ldrh	r1, [r5, #2]
 8001912:	4798      	blx	r3
 8001914:	42b7      	cmp	r7, r6
 8001916:	d1f7      	bne.n	8001908 <usb_standard_set_configuration+0x80>
 8001918:	e7d9      	b.n	80018ce <usb_standard_set_configuration+0x46>

0800191a <usb_standard_get_configuration>:
 800191a:	8819      	ldrh	r1, [r3, #0]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	2901      	cmp	r1, #1
 8001920:	bf84      	itt	hi
 8001922:	2101      	movhi	r1, #1
 8001924:	8019      	strhhi	r1, [r3, #0]
 8001926:	7dc3      	ldrb	r3, [r0, #23]
 8001928:	b12b      	cbz	r3, 8001936 <usb_standard_get_configuration+0x1c>
 800192a:	6841      	ldr	r1, [r0, #4]
 800192c:	200d      	movs	r0, #13
 800192e:	fb00 1303 	mla	r3, r0, r3, r1
 8001932:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001936:	2001      	movs	r0, #1
 8001938:	7013      	strb	r3, [r2, #0]
 800193a:	4770      	bx	lr

0800193c <usb_standard_get_interface>:
 800193c:	b530      	push	{r4, r5, lr}
 800193e:	240d      	movs	r4, #13
 8001940:	7dc5      	ldrb	r5, [r0, #23]
 8001942:	6840      	ldr	r0, [r0, #4]
 8001944:	436c      	muls	r4, r5
 8001946:	3c0d      	subs	r4, #13
 8001948:	4404      	add	r4, r0
 800194a:	888d      	ldrh	r5, [r1, #4]
 800194c:	7920      	ldrb	r0, [r4, #4]
 800194e:	4285      	cmp	r5, r0
 8001950:	d20c      	bcs.n	800196c <usb_standard_get_interface+0x30>
 8001952:	2001      	movs	r0, #1
 8001954:	8018      	strh	r0, [r3, #0]
 8001956:	888b      	ldrh	r3, [r1, #4]
 8001958:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	581b      	ldr	r3, [r3, r0]
 8001960:	b103      	cbz	r3, 8001964 <usb_standard_get_interface+0x28>
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2001      	movs	r0, #1
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	7013      	strb	r3, [r2, #0]
 800196a:	bd30      	pop	{r4, r5, pc}
 800196c:	2000      	movs	r0, #0
 800196e:	e7fc      	b.n	800196a <usb_standard_get_interface+0x2e>

08001970 <usb_standard_device_get_status>:
 8001970:	8819      	ldrh	r1, [r3, #0]
 8001972:	2001      	movs	r0, #1
 8001974:	2902      	cmp	r1, #2
 8001976:	bf84      	itt	hi
 8001978:	2102      	movhi	r1, #2
 800197a:	8019      	strhhi	r1, [r3, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	6811      	ldr	r1, [r2, #0]
 8001980:	700b      	strb	r3, [r1, #0]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	7053      	strb	r3, [r2, #1]
 8001986:	4770      	bx	lr

08001988 <usb_standard_endpoint_get_status>:
 8001988:	b510      	push	{r4, lr}
 800198a:	4614      	mov	r4, r2
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	2a02      	cmp	r2, #2
 8001990:	bf84      	itt	hi
 8001992:	2202      	movhi	r2, #2
 8001994:	801a      	strhhi	r2, [r3, #0]
 8001996:	8889      	ldrh	r1, [r1, #4]
 8001998:	b2c9      	uxtb	r1, r1
 800199a:	f7ff fdeb 	bl	8001574 <usbd_ep_stall_get>
 800199e:	3800      	subs	r0, #0
 80019a0:	bf18      	it	ne
 80019a2:	2001      	movne	r0, #1
 80019a4:	2200      	movs	r2, #0
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	7018      	strb	r0, [r3, #0]
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	2001      	movs	r0, #1
 80019ae:	705a      	strb	r2, [r3, #1]
 80019b0:	bd10      	pop	{r4, pc}

080019b2 <usb_standard_endpoint_stall>:
 80019b2:	b508      	push	{r3, lr}
 80019b4:	8889      	ldrh	r1, [r1, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	b2c9      	uxtb	r1, r1
 80019ba:	f7ff fdd7 	bl	800156c <usbd_ep_stall_set>
 80019be:	2001      	movs	r0, #1
 80019c0:	bd08      	pop	{r3, pc}

080019c2 <usb_standard_endpoint_unstall>:
 80019c2:	b508      	push	{r3, lr}
 80019c4:	8889      	ldrh	r1, [r1, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	b2c9      	uxtb	r1, r1
 80019ca:	f7ff fdcf 	bl	800156c <usbd_ep_stall_set>
 80019ce:	2001      	movs	r0, #1
 80019d0:	bd08      	pop	{r3, pc}

080019d2 <usb_standard_set_interface>:
 80019d2:	220d      	movs	r2, #13
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	461c      	mov	r4, r3
 80019d8:	7dc3      	ldrb	r3, [r0, #23]
 80019da:	435a      	muls	r2, r3
 80019dc:	6843      	ldr	r3, [r0, #4]
 80019de:	3a0d      	subs	r2, #13
 80019e0:	4413      	add	r3, r2
 80019e2:	791d      	ldrb	r5, [r3, #4]
 80019e4:	888a      	ldrh	r2, [r1, #4]
 80019e6:	4295      	cmp	r5, r2
 80019e8:	d919      	bls.n	8001a1e <usb_standard_set_interface+0x4c>
 80019ea:	f8d3 5009 	ldr.w	r5, [r3, #9]
 80019ee:	0116      	lsls	r6, r2, #4
 80019f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80019f4:	884b      	ldrh	r3, [r1, #2]
 80019f6:	7912      	ldrb	r2, [r2, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d910      	bls.n	8001a1e <usb_standard_set_interface+0x4c>
 80019fc:	59aa      	ldr	r2, [r5, r6]
 80019fe:	b152      	cbz	r2, 8001a16 <usb_standard_set_interface+0x44>
 8001a00:	7013      	strb	r3, [r2, #0]
 8001a02:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001a06:	b113      	cbz	r3, 8001a0e <usb_standard_set_interface+0x3c>
 8001a08:	884a      	ldrh	r2, [r1, #2]
 8001a0a:	8889      	ldrh	r1, [r1, #4]
 8001a0c:	4798      	blx	r3
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2001      	movs	r0, #1
 8001a12:	8023      	strh	r3, [r4, #0]
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f3      	beq.n	8001a02 <usb_standard_set_interface+0x30>
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	e7fa      	b.n	8001a14 <usb_standard_set_interface+0x42>
 8001a1e:	2000      	movs	r0, #0
 8001a20:	e7f8      	b.n	8001a14 <usb_standard_set_interface+0x42>

08001a22 <usb_standard_get_descriptor>:
 8001a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a26:	461f      	mov	r7, r3
 8001a28:	884b      	ldrh	r3, [r1, #2]
 8001a2a:	4606      	mov	r6, r0
 8001a2c:	0a18      	lsrs	r0, r3, #8
 8001a2e:	2802      	cmp	r0, #2
 8001a30:	4614      	mov	r4, r2
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	d010      	beq.n	8001a58 <usb_standard_get_descriptor+0x36>
 8001a36:	2803      	cmp	r0, #3
 8001a38:	f000 80ed 	beq.w	8001c16 <usb_standard_get_descriptor+0x1f4>
 8001a3c:	2801      	cmp	r0, #1
 8001a3e:	f040 8123 	bne.w	8001c88 <usb_standard_get_descriptor+0x266>
 8001a42:	6833      	ldr	r3, [r6, #0]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	883a      	ldrh	r2, [r7, #0]
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	bf28      	it	cs
 8001a4e:	4613      	movcs	r3, r2
 8001a50:	803b      	strh	r3, [r7, #0]
 8001a52:	b009      	add	sp, #36	; 0x24
 8001a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a58:	f04f 080d 	mov.w	r8, #13
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	fb08 f803 	mul.w	r8, r8, r3
 8001a62:	6932      	ldr	r2, [r6, #16]
 8001a64:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8001a68:	6022      	str	r2, [r4, #0]
 8001a6a:	f819 5008 	ldrb.w	r5, [r9, r8]
 8001a6e:	883c      	ldrh	r4, [r7, #0]
 8001a70:	eb09 0308 	add.w	r3, r9, r8
 8001a74:	42a5      	cmp	r5, r4
 8001a76:	bf28      	it	cs
 8001a78:	4625      	movcs	r5, r4
 8001a7a:	9202      	str	r2, [sp, #8]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	462a      	mov	r2, r5
 8001a80:	9802      	ldr	r0, [sp, #8]
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	f000 fc9a 	bl	80023bc <memcpy>
 8001a88:	9b02      	ldr	r3, [sp, #8]
 8001a8a:	1b64      	subs	r4, r4, r5
 8001a8c:	195e      	adds	r6, r3, r5
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f819 8008 	ldrb.w	r8, [r9, r8]
 8001a94:	b2a4      	uxth	r4, r4
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	9b03      	ldr	r3, [sp, #12]
 8001a9a:	791a      	ldrb	r2, [r3, #4]
 8001a9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d805      	bhi.n	8001ab0 <usb_standard_get_descriptor+0x8e>
 8001aa4:	9b02      	ldr	r3, [sp, #8]
 8001aa6:	f8a3 8002 	strh.w	r8, [r3, #2]
 8001aaa:	803d      	strh	r5, [r7, #0]
 8001aac:	2001      	movs	r0, #1
 8001aae:	e7d0      	b.n	8001a52 <usb_standard_get_descriptor+0x30>
 8001ab0:	9b01      	ldr	r3, [sp, #4]
 8001ab2:	9a01      	ldr	r2, [sp, #4]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	9305      	str	r3, [sp, #20]
 8001ab8:	9b03      	ldr	r3, [sp, #12]
 8001aba:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001abe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001ac2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8001ac6:	f1ba 0f00 	cmp.w	sl, #0
 8001aca:	d014      	beq.n	8001af6 <usb_standard_get_descriptor+0xd4>
 8001acc:	f89a 9000 	ldrb.w	r9, [sl]
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	45a1      	cmp	r9, r4
 8001ad4:	bf28      	it	cs
 8001ad6:	46a1      	movcs	r9, r4
 8001ad8:	4651      	mov	r1, sl
 8001ada:	464a      	mov	r2, r9
 8001adc:	f000 fc6e 	bl	80023bc <memcpy>
 8001ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ae4:	eba4 0409 	sub.w	r4, r4, r9
 8001ae8:	444d      	add	r5, r9
 8001aea:	4498      	add	r8, r3
 8001aec:	444e      	add	r6, r9
 8001aee:	b2a4      	uxth	r4, r4
 8001af0:	b2ad      	uxth	r5, r5
 8001af2:	fa1f f888 	uxth.w	r8, r8
 8001af6:	2300      	movs	r3, #0
 8001af8:	9304      	str	r3, [sp, #16]
 8001afa:	9b03      	ldr	r3, [sp, #12]
 8001afc:	9a05      	ldr	r2, [sp, #20]
 8001afe:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001b02:	4413      	add	r3, r2
 8001b04:	7919      	ldrb	r1, [r3, #4]
 8001b06:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8001b0a:	4291      	cmp	r1, r2
 8001b0c:	d802      	bhi.n	8001b14 <usb_standard_get_descriptor+0xf2>
 8001b0e:	9b01      	ldr	r3, [sp, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	e7c0      	b.n	8001a96 <usb_standard_get_descriptor+0x74>
 8001b14:	2115      	movs	r1, #21
 8001b16:	9a04      	ldr	r2, [sp, #16]
 8001b18:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8001b1c:	fb01 f902 	mul.w	r9, r1, r2
 8001b20:	f81a b009 	ldrb.w	fp, [sl, r9]
 8001b24:	eb0a 0309 	add.w	r3, sl, r9
 8001b28:	45a3      	cmp	fp, r4
 8001b2a:	bf28      	it	cs
 8001b2c:	46a3      	movcs	fp, r4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4630      	mov	r0, r6
 8001b32:	465a      	mov	r2, fp
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	f000 fc41 	bl	80023bc <memcpy>
 8001b3a:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8001b3e:	eba4 040b 	sub.w	r4, r4, fp
 8001b42:	4498      	add	r8, r3
 8001b44:	9b00      	ldr	r3, [sp, #0]
 8001b46:	445d      	add	r5, fp
 8001b48:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8001b4c:	445e      	add	r6, fp
 8001b4e:	b2a4      	uxth	r4, r4
 8001b50:	b2ad      	uxth	r5, r5
 8001b52:	fa1f f888 	uxth.w	r8, r8
 8001b56:	b1b1      	cbz	r1, 8001b86 <usb_standard_get_descriptor+0x164>
 8001b58:	f8d3 a011 	ldr.w	sl, [r3, #17]
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	45a2      	cmp	sl, r4
 8001b60:	bfa8      	it	ge
 8001b62:	46a2      	movge	sl, r4
 8001b64:	fa1f f98a 	uxth.w	r9, sl
 8001b68:	464a      	mov	r2, r9
 8001b6a:	f000 fc27 	bl	80023bc <memcpy>
 8001b6e:	9b00      	ldr	r3, [sp, #0]
 8001b70:	eba4 0409 	sub.w	r4, r4, r9
 8001b74:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8001b78:	444d      	add	r5, r9
 8001b7a:	4498      	add	r8, r3
 8001b7c:	444e      	add	r6, r9
 8001b7e:	b2a4      	uxth	r4, r4
 8001b80:	b2ad      	uxth	r5, r5
 8001b82:	fa1f f888 	uxth.w	r8, r8
 8001b86:	f04f 0900 	mov.w	r9, #0
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	791a      	ldrb	r2, [r3, #4]
 8001b8e:	fa1f f389 	uxth.w	r3, r9
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d802      	bhi.n	8001b9c <usb_standard_get_descriptor+0x17a>
 8001b96:	9b04      	ldr	r3, [sp, #16]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	e7ad      	b.n	8001af8 <usb_standard_get_descriptor+0xd6>
 8001b9c:	9b00      	ldr	r3, [sp, #0]
 8001b9e:	ebc9 1b09 	rsb	fp, r9, r9, lsl #4
 8001ba2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f813 200b 	ldrb.w	r2, [r3, fp]
 8001bac:	eb03 0a0b 	add.w	sl, r3, fp
 8001bb0:	42a2      	cmp	r2, r4
 8001bb2:	bf28      	it	cs
 8001bb4:	4622      	movcs	r2, r4
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	9307      	str	r3, [sp, #28]
 8001bba:	9206      	str	r2, [sp, #24]
 8001bbc:	f000 fbfe 	bl	80023bc <memcpy>
 8001bc0:	9b07      	ldr	r3, [sp, #28]
 8001bc2:	9a06      	ldr	r2, [sp, #24]
 8001bc4:	f813 300b 	ldrb.w	r3, [r3, fp]
 8001bc8:	f8da 1007 	ldr.w	r1, [sl, #7]
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	4415      	add	r5, r2
 8001bd0:	4498      	add	r8, r3
 8001bd2:	4416      	add	r6, r2
 8001bd4:	b2a4      	uxth	r4, r4
 8001bd6:	b2ad      	uxth	r5, r5
 8001bd8:	fa1f f888 	uxth.w	r8, r8
 8001bdc:	b1c1      	cbz	r1, 8001c10 <usb_standard_get_descriptor+0x1ee>
 8001bde:	f8da 200b 	ldr.w	r2, [sl, #11]
 8001be2:	4630      	mov	r0, r6
 8001be4:	42a2      	cmp	r2, r4
 8001be6:	bfa8      	it	ge
 8001be8:	4622      	movge	r2, r4
 8001bea:	fa1f fb82 	uxth.w	fp, r2
 8001bee:	465a      	mov	r2, fp
 8001bf0:	f8cd b018 	str.w	fp, [sp, #24]
 8001bf4:	f000 fbe2 	bl	80023bc <memcpy>
 8001bf8:	f8da 300b 	ldr.w	r3, [sl, #11]
 8001bfc:	9a06      	ldr	r2, [sp, #24]
 8001bfe:	eba4 040b 	sub.w	r4, r4, fp
 8001c02:	445d      	add	r5, fp
 8001c04:	4498      	add	r8, r3
 8001c06:	4416      	add	r6, r2
 8001c08:	b2a4      	uxth	r4, r4
 8001c0a:	b2ad      	uxth	r5, r5
 8001c0c:	fa1f f888 	uxth.w	r8, r8
 8001c10:	f109 0901 	add.w	r9, r9, #1
 8001c14:	e7b9      	b.n	8001b8a <usb_standard_get_descriptor+0x168>
 8001c16:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001c1a:	6935      	ldr	r5, [r6, #16]
 8001c1c:	d10d      	bne.n	8001c3a <usb_standard_get_descriptor+0x218>
 8001c1e:	2309      	movs	r3, #9
 8001c20:	70ab      	strb	r3, [r5, #2]
 8001c22:	2304      	movs	r3, #4
 8001c24:	70eb      	strb	r3, [r5, #3]
 8001c26:	702b      	strb	r3, [r5, #0]
 8001c28:	883b      	ldrh	r3, [r7, #0]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	803b      	strh	r3, [r7, #0]
 8001c32:	2303      	movs	r3, #3
 8001c34:	706b      	strb	r3, [r5, #1]
 8001c36:	6025      	str	r5, [r4, #0]
 8001c38:	e738      	b.n	8001aac <usb_standard_get_descriptor+0x8a>
 8001c3a:	68b0      	ldr	r0, [r6, #8]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	f43f af07 	beq.w	8001a52 <usb_standard_get_descriptor+0x30>
 8001c44:	68f2      	ldr	r2, [r6, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dd1e      	ble.n	8001c88 <usb_standard_get_descriptor+0x266>
 8001c4a:	f240 4209 	movw	r2, #1033	; 0x409
 8001c4e:	8889      	ldrh	r1, [r1, #4]
 8001c50:	4291      	cmp	r1, r2
 8001c52:	d119      	bne.n	8001c88 <usb_standard_get_descriptor+0x266>
 8001c54:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f000 fbbd 	bl	80023d8 <strlen>
 8001c5e:	3001      	adds	r0, #1
 8001c60:	0040      	lsls	r0, r0, #1
 8001c62:	b2c0      	uxtb	r0, r0
 8001c64:	7028      	strb	r0, [r5, #0]
 8001c66:	883b      	ldrh	r3, [r7, #0]
 8001c68:	4298      	cmp	r0, r3
 8001c6a:	bf28      	it	cs
 8001c6c:	4618      	movcs	r0, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	8038      	strh	r0, [r7, #0]
 8001c72:	883a      	ldrh	r2, [r7, #0]
 8001c74:	0852      	lsrs	r2, r2, #1
 8001c76:	3a01      	subs	r2, #1
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	ddda      	ble.n	8001c32 <usb_standard_get_descriptor+0x210>
 8001c7c:	5cf1      	ldrb	r1, [r6, r3]
 8001c7e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8001c82:	8051      	strh	r1, [r2, #2]
 8001c84:	3301      	adds	r3, #1
 8001c86:	e7f4      	b.n	8001c72 <usb_standard_get_descriptor+0x250>
 8001c88:	2000      	movs	r0, #0
 8001c8a:	e6e2      	b.n	8001a52 <usb_standard_get_descriptor+0x30>

08001c8c <usb_standard_interface_get_status>:
 8001c8c:	8819      	ldrh	r1, [r3, #0]
 8001c8e:	2001      	movs	r0, #1
 8001c90:	2902      	cmp	r1, #2
 8001c92:	bf84      	itt	hi
 8001c94:	2102      	movhi	r1, #2
 8001c96:	8019      	strhhi	r1, [r3, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6811      	ldr	r1, [r2, #0]
 8001c9c:	700b      	strb	r3, [r1, #0]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	7053      	strb	r3, [r2, #1]
 8001ca2:	4770      	bx	lr

08001ca4 <usbd_register_set_config_callback>:
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	b510      	push	{r4, lr}
 8001caa:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
 8001cae:	f854 0b04 	ldr.w	r0, [r4], #4
 8001cb2:	b138      	cbz	r0, 8001cc4 <usbd_register_set_config_callback+0x20>
 8001cb4:	4288      	cmp	r0, r1
 8001cb6:	d009      	beq.n	8001ccc <usbd_register_set_config_callback+0x28>
 8001cb8:	3301      	adds	r3, #1
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d1f7      	bne.n	8001cae <usbd_register_set_config_callback+0xa>
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	3332      	adds	r3, #50	; 0x32
 8001cc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001cca:	e7fa      	b.n	8001cc2 <usbd_register_set_config_callback+0x1e>
 8001ccc:	2000      	movs	r0, #0
 8001cce:	e7f8      	b.n	8001cc2 <usbd_register_set_config_callback+0x1e>

08001cd0 <_usbd_standard_request_device>:
 8001cd0:	b410      	push	{r4}
 8001cd2:	784c      	ldrb	r4, [r1, #1]
 8001cd4:	2c09      	cmp	r4, #9
 8001cd6:	d812      	bhi.n	8001cfe <_usbd_standard_request_device+0x2e>
 8001cd8:	e8df f004 	tbb	[pc, r4]
 8001cdc:	1111110d 	.word	0x1111110d
 8001ce0:	110b0f11 	.word	0x110b0f11
 8001ce4:	0509      	.short	0x0509
 8001ce6:	4c07      	ldr	r4, [pc, #28]	; (8001d04 <_usbd_standard_request_device+0x34>)
 8001ce8:	46a4      	mov	ip, r4
 8001cea:	bc10      	pop	{r4}
 8001cec:	4760      	bx	ip
 8001cee:	4c06      	ldr	r4, [pc, #24]	; (8001d08 <_usbd_standard_request_device+0x38>)
 8001cf0:	e7fa      	b.n	8001ce8 <_usbd_standard_request_device+0x18>
 8001cf2:	4c06      	ldr	r4, [pc, #24]	; (8001d0c <_usbd_standard_request_device+0x3c>)
 8001cf4:	e7f8      	b.n	8001ce8 <_usbd_standard_request_device+0x18>
 8001cf6:	4c06      	ldr	r4, [pc, #24]	; (8001d10 <_usbd_standard_request_device+0x40>)
 8001cf8:	e7f6      	b.n	8001ce8 <_usbd_standard_request_device+0x18>
 8001cfa:	4c06      	ldr	r4, [pc, #24]	; (8001d14 <_usbd_standard_request_device+0x44>)
 8001cfc:	e7f4      	b.n	8001ce8 <_usbd_standard_request_device+0x18>
 8001cfe:	2000      	movs	r0, #0
 8001d00:	bc10      	pop	{r4}
 8001d02:	4770      	bx	lr
 8001d04:	08001889 	.word	0x08001889
 8001d08:	0800191b 	.word	0x0800191b
 8001d0c:	08001a23 	.word	0x08001a23
 8001d10:	08001971 	.word	0x08001971
 8001d14:	0800185f 	.word	0x0800185f

08001d18 <_usbd_standard_request_interface>:
 8001d18:	b410      	push	{r4}
 8001d1a:	784c      	ldrb	r4, [r1, #1]
 8001d1c:	2c0a      	cmp	r4, #10
 8001d1e:	d006      	beq.n	8001d2e <_usbd_standard_request_interface+0x16>
 8001d20:	2c0b      	cmp	r4, #11
 8001d22:	d006      	beq.n	8001d32 <_usbd_standard_request_interface+0x1a>
 8001d24:	b93c      	cbnz	r4, 8001d36 <_usbd_standard_request_interface+0x1e>
 8001d26:	4c05      	ldr	r4, [pc, #20]	; (8001d3c <_usbd_standard_request_interface+0x24>)
 8001d28:	46a4      	mov	ip, r4
 8001d2a:	bc10      	pop	{r4}
 8001d2c:	4760      	bx	ip
 8001d2e:	4c04      	ldr	r4, [pc, #16]	; (8001d40 <_usbd_standard_request_interface+0x28>)
 8001d30:	e7fa      	b.n	8001d28 <_usbd_standard_request_interface+0x10>
 8001d32:	4c04      	ldr	r4, [pc, #16]	; (8001d44 <_usbd_standard_request_interface+0x2c>)
 8001d34:	e7f8      	b.n	8001d28 <_usbd_standard_request_interface+0x10>
 8001d36:	2000      	movs	r0, #0
 8001d38:	bc10      	pop	{r4}
 8001d3a:	4770      	bx	lr
 8001d3c:	08001c8d 	.word	0x08001c8d
 8001d40:	0800193d 	.word	0x0800193d
 8001d44:	080019d3 	.word	0x080019d3

08001d48 <_usbd_standard_request_endpoint>:
 8001d48:	b410      	push	{r4}
 8001d4a:	784c      	ldrb	r4, [r1, #1]
 8001d4c:	2c01      	cmp	r4, #1
 8001d4e:	d004      	beq.n	8001d5a <_usbd_standard_request_endpoint+0x12>
 8001d50:	2c03      	cmp	r4, #3
 8001d52:	d007      	beq.n	8001d64 <_usbd_standard_request_endpoint+0x1c>
 8001d54:	b91c      	cbnz	r4, 8001d5e <_usbd_standard_request_endpoint+0x16>
 8001d56:	4c08      	ldr	r4, [pc, #32]	; (8001d78 <_usbd_standard_request_endpoint+0x30>)
 8001d58:	e008      	b.n	8001d6c <_usbd_standard_request_endpoint+0x24>
 8001d5a:	884c      	ldrh	r4, [r1, #2]
 8001d5c:	b14c      	cbz	r4, 8001d72 <_usbd_standard_request_endpoint+0x2a>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	bc10      	pop	{r4}
 8001d62:	4770      	bx	lr
 8001d64:	884c      	ldrh	r4, [r1, #2]
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	d1f9      	bne.n	8001d5e <_usbd_standard_request_endpoint+0x16>
 8001d6a:	4c04      	ldr	r4, [pc, #16]	; (8001d7c <_usbd_standard_request_endpoint+0x34>)
 8001d6c:	46a4      	mov	ip, r4
 8001d6e:	bc10      	pop	{r4}
 8001d70:	4760      	bx	ip
 8001d72:	4c03      	ldr	r4, [pc, #12]	; (8001d80 <_usbd_standard_request_endpoint+0x38>)
 8001d74:	e7fa      	b.n	8001d6c <_usbd_standard_request_endpoint+0x24>
 8001d76:	bf00      	nop
 8001d78:	08001989 	.word	0x08001989
 8001d7c:	080019b3 	.word	0x080019b3
 8001d80:	080019c3 	.word	0x080019c3

08001d84 <_usbd_standard_request>:
 8001d84:	b410      	push	{r4}
 8001d86:	780c      	ldrb	r4, [r1, #0]
 8001d88:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001d8c:	d10f      	bne.n	8001dae <_usbd_standard_request+0x2a>
 8001d8e:	f004 041f 	and.w	r4, r4, #31
 8001d92:	2c01      	cmp	r4, #1
 8001d94:	d005      	beq.n	8001da2 <_usbd_standard_request+0x1e>
 8001d96:	2c02      	cmp	r4, #2
 8001d98:	d006      	beq.n	8001da8 <_usbd_standard_request+0x24>
 8001d9a:	b944      	cbnz	r4, 8001dae <_usbd_standard_request+0x2a>
 8001d9c:	bc10      	pop	{r4}
 8001d9e:	f7ff bf97 	b.w	8001cd0 <_usbd_standard_request_device>
 8001da2:	bc10      	pop	{r4}
 8001da4:	f7ff bfb8 	b.w	8001d18 <_usbd_standard_request_interface>
 8001da8:	bc10      	pop	{r4}
 8001daa:	f7ff bfcd 	b.w	8001d48 <_usbd_standard_request_endpoint>
 8001dae:	2000      	movs	r0, #0
 8001db0:	bc10      	pop	{r4}
 8001db2:	4770      	bx	lr

08001db4 <st_usbfs_v1_usbd_init>:
 8001db4:	b508      	push	{r3, lr}
 8001db6:	f240 3097 	movw	r0, #919	; 0x397
 8001dba:	f7ff fb19 	bl	80013f0 <rcc_periph_clock_enable>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <st_usbfs_v1_usbd_init+0x24>)
 8001dc2:	4906      	ldr	r1, [pc, #24]	; (8001ddc <st_usbfs_v1_usbd_init+0x28>)
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	f841 3c0c 	str.w	r3, [r1, #-12]
 8001dcc:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <st_usbfs_v1_usbd_init+0x2c>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40005c40 	.word	0x40005c40
 8001ddc:	40005c50 	.word	0x40005c50
 8001de0:	2000012c 	.word	0x2000012c

08001de4 <st_usbfs_copy_to_pm>:
 8001de4:	3201      	adds	r2, #1
 8001de6:	1052      	asrs	r2, r2, #1
 8001de8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001dec:	4291      	cmp	r1, r2
 8001dee:	d100      	bne.n	8001df2 <st_usbfs_copy_to_pm+0xe>
 8001df0:	4770      	bx	lr
 8001df2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001df6:	f840 3b04 	str.w	r3, [r0], #4
 8001dfa:	e7f7      	b.n	8001dec <st_usbfs_copy_to_pm+0x8>

08001dfc <st_usbfs_copy_from_pm>:
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b570      	push	{r4, r5, r6, lr}
 8001e00:	f002 0401 	and.w	r4, r2, #1
 8001e04:	0852      	lsrs	r2, r2, #1
 8001e06:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8001e0a:	42a9      	cmp	r1, r5
 8001e0c:	d104      	bne.n	8001e18 <st_usbfs_copy_from_pm+0x1c>
 8001e0e:	b114      	cbz	r4, 8001e16 <st_usbfs_copy_from_pm+0x1a>
 8001e10:	780b      	ldrb	r3, [r1, #0]
 8001e12:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
 8001e18:	f831 6b04 	ldrh.w	r6, [r1], #4
 8001e1c:	f823 6b02 	strh.w	r6, [r3], #2
 8001e20:	e7f3      	b.n	8001e0a <st_usbfs_copy_from_pm+0xe>
	...

08001e24 <systick_set_reload>:
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <systick_set_reload+0xc>)
 8001e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001e2a:	6018      	str	r0, [r3, #0]
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e014 	.word	0xe000e014

08001e34 <systick_set_clocksource>:
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <systick_set_clocksource+0x14>)
 8001e36:	f000 0004 	and.w	r0, r0, #4
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	4303      	orrs	r3, r0
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <systick_interrupt_enable>:
 8001e4c:	4a02      	ldr	r2, [pc, #8]	; (8001e58 <systick_interrupt_enable+0xc>)
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4770      	bx	lr
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <systick_counter_enable>:
 8001e5c:	4a02      	ldr	r2, [pc, #8]	; (8001e68 <systick_counter_enable+0xc>)
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4770      	bx	lr
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <nvic_enable_irq>:
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	0943      	lsrs	r3, r0, #5
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001e76:	f000 001f 	and.w	r0, r0, #31
 8001e7a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001e7e:	fa02 f000 	lsl.w	r0, r2, r0
 8001e82:	6018      	str	r0, [r3, #0]
 8001e84:	4770      	bx	lr
	...

08001e88 <nvic_set_priority>:
 8001e88:	2843      	cmp	r0, #67	; 0x43
 8001e8a:	bf93      	iteet	ls
 8001e8c:	f100 4060 	addls.w	r0, r0, #3758096384	; 0xe0000000
 8001e90:	4b04      	ldrhi	r3, [pc, #16]	; (8001ea4 <nvic_set_priority+0x1c>)
 8001e92:	f000 000f 	andhi.w	r0, r0, #15
 8001e96:	f500 4064 	addls.w	r0, r0, #58368	; 0xe400
 8001e9a:	bf8c      	ite	hi
 8001e9c:	54c1      	strbhi	r1, [r0, r3]
 8001e9e:	7001      	strbls	r1, [r0, #0]
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed14 	.word	0xe000ed14

08001ea8 <flash_set_ws>:
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <flash_set_ws+0x10>)
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f023 0307 	bic.w	r3, r3, #7
 8001eb0:	4303      	orrs	r3, r0
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000

08001ebc <st_usbfs_set_address>:
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <st_usbfs_set_address+0xc>)
 8001ebe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001ec2:	6019      	str	r1, [r3, #0]
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40005c4c 	.word	0x40005c4c

08001ecc <st_usbfs_set_ep_rx_bufsize>:
 8001ecc:	2a3e      	cmp	r2, #62	; 0x3e
 8001ece:	d913      	bls.n	8001ef8 <st_usbfs_set_ep_rx_bufsize+0x2c>
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	f3c2 1344 	ubfx	r3, r2, #5, #5
 8001ed6:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
 8001eda:	f102 0020 	add.w	r0, r2, #32
 8001ede:	f043 0320 	orr.w	r3, r3, #32
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <st_usbfs_set_ep_rx_bufsize+0x38>)
 8001ee4:	029b      	lsls	r3, r3, #10
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b292      	uxth	r2, r2
 8001eec:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001ef0:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <st_usbfs_set_ep_rx_bufsize+0x3c>)
 8001ef2:	0049      	lsls	r1, r1, #1
 8001ef4:	5053      	str	r3, [r2, r1]
 8001ef6:	4770      	bx	lr
 8001ef8:	3201      	adds	r2, #1
 8001efa:	0853      	lsrs	r3, r2, #1
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	b290      	uxth	r0, r2
 8001f02:	e7ee      	b.n	8001ee2 <st_usbfs_set_ep_rx_bufsize+0x16>
 8001f04:	40005c50 	.word	0x40005c50
 8001f08:	4000600c 	.word	0x4000600c

08001f0c <st_usbfs_ep_setup>:
 8001f0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f10:	4606      	mov	r6, r0
 8001f12:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8001f16:	4c43      	ldr	r4, [pc, #268]	; (8002024 <st_usbfs_ep_setup+0x118>)
 8001f18:	f001 077f 	and.w	r7, r1, #127	; 0x7f
 8001f1c:	e9cd 4000 	strd	r4, r0, [sp]
 8001f20:	00bc      	lsls	r4, r7, #2
 8001f22:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001f26:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	ad02      	add	r5, sp, #8
 8001f2e:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8001f32:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8001f36:	4338      	orrs	r0, r7
 8001f38:	b280      	uxth	r0, r0
 8001f3a:	6020      	str	r0, [r4, #0]
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f42:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001f46:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 8001f4a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8001f4e:	4310      	orrs	r0, r2
 8001f50:	b249      	sxtb	r1, r1
 8001f52:	b280      	uxth	r0, r0
 8001f54:	2900      	cmp	r1, #0
 8001f56:	6020      	str	r0, [r4, #0]
 8001f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f5c:	4832      	ldr	r0, [pc, #200]	; (8002028 <st_usbfs_ep_setup+0x11c>)
 8001f5e:	ea4f 0cc7 	mov.w	ip, r7, lsl #3
 8001f62:	db2a      	blt.n	8001fba <st_usbfs_ep_setup+0xae>
 8001f64:	b34f      	cbz	r7, 8001fba <st_usbfs_ep_setup+0xae>
 8001f66:	6802      	ldr	r2, [r0, #0]
 8001f68:	8b31      	ldrh	r1, [r6, #24]
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	4494      	add	ip, r2
 8001f6e:	4a2f      	ldr	r2, [pc, #188]	; (800202c <st_usbfs_ep_setup+0x120>)
 8001f70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001f74:	f842 100c 	str.w	r1, [r2, ip]
 8001f78:	4630      	mov	r0, r6
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4639      	mov	r1, r7
 8001f7e:	f7ff ffa5 	bl	8001ecc <st_usbfs_set_ep_rx_bufsize>
 8001f82:	f1b8 0f00 	cmp.w	r8, #0
 8001f86:	d146      	bne.n	8002016 <st_usbfs_ep_setup+0x10a>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 8001f8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	6023      	str	r3, [r4, #0]
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	6023      	str	r3, [r4, #0]
 8001fb2:	8b33      	ldrh	r3, [r6, #24]
 8001fb4:	4418      	add	r0, r3
 8001fb6:	8330      	strh	r0, [r6, #24]
 8001fb8:	e02a      	b.n	8002010 <st_usbfs_ep_setup+0x104>
 8001fba:	6805      	ldr	r5, [r0, #0]
 8001fbc:	8b32      	ldrh	r2, [r6, #24]
 8001fbe:	b2ad      	uxth	r5, r5
 8001fc0:	4465      	add	r5, ip
 8001fc2:	006d      	lsls	r5, r5, #1
 8001fc4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001fc8:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
 8001fcc:	602a      	str	r2, [r5, #0]
 8001fce:	f1b8 0f00 	cmp.w	r8, #0
 8001fd2:	d004      	beq.n	8001fde <st_usbfs_ep_setup+0xd2>
 8001fd4:	250c      	movs	r5, #12
 8001fd6:	fb05 6507 	mla	r5, r5, r7, r6
 8001fda:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
 8001fde:	6825      	ldr	r5, [r4, #0]
 8001fe0:	441a      	add	r2, r3
 8001fe2:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001fe6:	f025 0530 	bic.w	r5, r5, #48	; 0x30
 8001fea:	042d      	lsls	r5, r5, #16
 8001fec:	0c2d      	lsrs	r5, r5, #16
 8001fee:	6025      	str	r5, [r4, #0]
 8001ff0:	6825      	ldr	r5, [r4, #0]
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001ff8:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001ffc:	b2ad      	uxth	r5, r5
 8001ffe:	f085 0520 	eor.w	r5, r5, #32
 8002002:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8002006:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800200a:	6025      	str	r5, [r4, #0]
 800200c:	8332      	strh	r2, [r6, #24]
 800200e:	daaa      	bge.n	8001f66 <st_usbfs_ep_setup+0x5a>
 8002010:	b002      	add	sp, #8
 8002012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002016:	210c      	movs	r1, #12
 8002018:	fb01 6707 	mla	r7, r1, r7, r6
 800201c:	f8c7 806c 	str.w	r8, [r7, #108]	; 0x6c
 8002020:	e7b2      	b.n	8001f88 <st_usbfs_ep_setup+0x7c>
 8002022:	bf00      	nop
 8002024:	04000200 	.word	0x04000200
 8002028:	40005c50 	.word	0x40005c50
 800202c:	40006008 	.word	0x40006008

08002030 <st_usbfs_endpoints_reset>:
 8002030:	f248 0180 	movw	r1, #32896	; 0x8080
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <st_usbfs_endpoints_reset+0x34>)
 8002038:	4e0b      	ldr	r6, [pc, #44]	; (8002068 <st_usbfs_endpoints_reset+0x38>)
 800203a:	4d0c      	ldr	r5, [pc, #48]	; (800206c <st_usbfs_endpoints_reset+0x3c>)
 800203c:	4c0c      	ldr	r4, [pc, #48]	; (8002070 <st_usbfs_endpoints_reset+0x40>)
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	4033      	ands	r3, r6
 8002042:	430b      	orrs	r3, r1
 8002044:	b29b      	uxth	r3, r3
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	402b      	ands	r3, r5
 800204c:	430b      	orrs	r3, r1
 800204e:	b29b      	uxth	r3, r3
 8002050:	f842 3b04 	str.w	r3, [r2], #4
 8002054:	42a2      	cmp	r2, r4
 8002056:	d1f2      	bne.n	800203e <st_usbfs_endpoints_reset+0xe>
 8002058:	6803      	ldr	r3, [r0, #0]
 800205a:	79db      	ldrb	r3, [r3, #7]
 800205c:	3320      	adds	r3, #32
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	8303      	strh	r3, [r0, #24]
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	40005c04 	.word	0x40005c04
 8002068:	ffff8fbf 	.word	0xffff8fbf
 800206c:	ffffbf8f 	.word	0xffffbf8f
 8002070:	40005c20 	.word	0x40005c20

08002074 <st_usbfs_ep_stall_set>:
 8002074:	b510      	push	{r4, lr}
 8002076:	2900      	cmp	r1, #0
 8002078:	d133      	bne.n	80020e2 <st_usbfs_ep_stall_set+0x6e>
 800207a:	2a00      	cmp	r2, #0
 800207c:	bf14      	ite	ne
 800207e:	2410      	movne	r4, #16
 8002080:	2420      	moveq	r4, #32
 8002082:	482b      	ldr	r0, [pc, #172]	; (8002130 <st_usbfs_ep_stall_set+0xbc>)
 8002084:	6803      	ldr	r3, [r0, #0]
 8002086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800208a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800208e:	4063      	eors	r3, r4
 8002090:	b21b      	sxth	r3, r3
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209a:	b29b      	uxth	r3, r3
 800209c:	6003      	str	r3, [r0, #0]
 800209e:	0089      	lsls	r1, r1, #2
 80020a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80020a4:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80020a8:	b93a      	cbnz	r2, 80020ba <st_usbfs_ep_stall_set+0x46>
 80020aa:	680b      	ldr	r3, [r1, #0]
 80020ac:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 80020b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	600b      	str	r3, [r1, #0]
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	bf14      	ite	ne
 80020be:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 80020c2:	f44f 5240 	moveq.w	r2, #12288	; 0x3000
 80020c6:	680b      	ldr	r3, [r1, #0]
 80020c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d0:	4053      	eors	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	b29b      	uxth	r3, r3
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e024      	b.n	800212c <st_usbfs_ep_stall_set+0xb8>
 80020e2:	060b      	lsls	r3, r1, #24
 80020e4:	d5db      	bpl.n	800209e <st_usbfs_ep_stall_set+0x2a>
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2210      	movne	r2, #16
 80020ec:	2220      	moveq	r2, #32
 80020ee:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80020f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020fa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002104:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002108:	ea82 0201 	eor.w	r2, r2, r1
 800210c:	b212      	sxth	r2, r2
 800210e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002116:	b292      	uxth	r2, r2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	d107      	bne.n	800212c <st_usbfs_ep_stall_set+0xb8>
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002122:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002126:	0412      	lsls	r2, r2, #16
 8002128:	0c12      	lsrs	r2, r2, #16
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	bd10      	pop	{r4, pc}
 800212e:	bf00      	nop
 8002130:	40005c00 	.word	0x40005c00

08002134 <st_usbfs_ep_stall_get>:
 8002134:	060b      	lsls	r3, r1, #24
 8002136:	d50e      	bpl.n	8002156 <st_usbfs_ep_stall_get+0x22>
 8002138:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800213c:	0089      	lsls	r1, r1, #2
 800213e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002142:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002146:	6808      	ldr	r0, [r1, #0]
 8002148:	f000 0030 	and.w	r0, r0, #48	; 0x30
 800214c:	2810      	cmp	r0, #16
 800214e:	bf14      	ite	ne
 8002150:	2000      	movne	r0, #0
 8002152:	2001      	moveq	r0, #1
 8002154:	4770      	bx	lr
 8002156:	0089      	lsls	r1, r1, #2
 8002158:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800215c:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002160:	6808      	ldr	r0, [r1, #0]
 8002162:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 8002166:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800216a:	e7f0      	b.n	800214e <st_usbfs_ep_stall_get+0x1a>

0800216c <st_usbfs_ep_nak_set>:
 800216c:	060b      	lsls	r3, r1, #24
 800216e:	d412      	bmi.n	8002196 <st_usbfs_ep_nak_set+0x2a>
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <st_usbfs_ep_nak_set+0x34>)
 8002172:	480c      	ldr	r0, [pc, #48]	; (80021a4 <st_usbfs_ep_nak_set+0x38>)
 8002174:	545a      	strb	r2, [r3, r1]
 8002176:	0089      	lsls	r1, r1, #2
 8002178:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800217c:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002180:	680b      	ldr	r3, [r1, #0]
 8002182:	4003      	ands	r3, r0
 8002184:	b29b      	uxth	r3, r3
 8002186:	b13a      	cbz	r2, 8002198 <st_usbfs_ep_nak_set+0x2c>
 8002188:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800218c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	600b      	str	r3, [r1, #0]
 8002196:	4770      	bx	lr
 8002198:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800219c:	e7f6      	b.n	800218c <st_usbfs_ep_nak_set+0x20>
 800219e:	bf00      	nop
 80021a0:	20000228 	.word	0x20000228
 80021a4:	ffffbf8f 	.word	0xffffbf8f

080021a8 <st_usbfs_ep_write_packet>:
 80021a8:	4608      	mov	r0, r1
 80021aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ac:	461d      	mov	r5, r3
 80021ae:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80021b2:	009c      	lsls	r4, r3, #2
 80021b4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80021b8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80021bc:	4611      	mov	r1, r2
 80021be:	6822      	ldr	r2, [r4, #0]
 80021c0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80021c4:	2a30      	cmp	r2, #48	; 0x30
 80021c6:	d028      	beq.n	800221a <st_usbfs_ep_write_packet+0x72>
 80021c8:	4f15      	ldr	r7, [pc, #84]	; (8002220 <st_usbfs_ep_write_packet+0x78>)
 80021ca:	462a      	mov	r2, r5
 80021cc:	6838      	ldr	r0, [r7, #0]
 80021ce:	00de      	lsls	r6, r3, #3
 80021d0:	b280      	uxth	r0, r0
 80021d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80021d6:	0040      	lsls	r0, r0, #1
 80021d8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80021dc:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80021e0:	8800      	ldrh	r0, [r0, #0]
 80021e2:	0040      	lsls	r0, r0, #1
 80021e4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80021e8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80021ec:	f7ff fdfa 	bl	8001de4 <st_usbfs_copy_to_pm>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	441e      	add	r6, r3
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <st_usbfs_ep_write_packet+0x7c>)
 80021f8:	0076      	lsls	r6, r6, #1
 80021fa:	519d      	str	r5, [r3, r6]
 80021fc:	6821      	ldr	r1, [r4, #0]
 80021fe:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002202:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002206:	b289      	uxth	r1, r1
 8002208:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 800220c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002210:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002214:	6021      	str	r1, [r4, #0]
 8002216:	4628      	mov	r0, r5
 8002218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800221a:	2500      	movs	r5, #0
 800221c:	e7fb      	b.n	8002216 <st_usbfs_ep_write_packet+0x6e>
 800221e:	bf00      	nop
 8002220:	40005c50 	.word	0x40005c50
 8002224:	40006004 	.word	0x40006004

08002228 <st_usbfs_ep_read_packet>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	008d      	lsls	r5, r1, #2
 800222c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002230:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8002234:	461c      	mov	r4, r3
 8002236:	682b      	ldr	r3, [r5, #0]
 8002238:	460e      	mov	r6, r1
 800223a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800223e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002242:	4610      	mov	r0, r2
 8002244:	d03b      	beq.n	80022be <st_usbfs_ep_read_packet+0x96>
 8002246:	4f1f      	ldr	r7, [pc, #124]	; (80022c4 <st_usbfs_ep_read_packet+0x9c>)
 8002248:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <st_usbfs_ep_read_packet+0xa0>)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	b29b      	uxth	r3, r3
 8002250:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	58d3      	ldr	r3, [r2, r3]
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	42a3      	cmp	r3, r4
 800225e:	da06      	bge.n	800226e <st_usbfs_ep_read_packet+0x46>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	440b      	add	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	58d4      	ldr	r4, [r2, r3]
 800226a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4622      	mov	r2, r4
 8002272:	b29b      	uxth	r3, r3
 8002274:	4419      	add	r1, r3
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <st_usbfs_ep_read_packet+0xa4>)
 8002278:	0049      	lsls	r1, r1, #1
 800227a:	5a59      	ldrh	r1, [r3, r1]
 800227c:	0049      	lsls	r1, r1, #1
 800227e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002282:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8002286:	f7ff fdb9 	bl	8001dfc <st_usbfs_copy_from_pm>
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	0d1b      	lsrs	r3, r3, #20
 8002294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <st_usbfs_ep_read_packet+0xa8>)
 800229c:	5d9b      	ldrb	r3, [r3, r6]
 800229e:	b963      	cbnz	r3, 80022ba <st_usbfs_ep_read_packet+0x92>
 80022a0:	6829      	ldr	r1, [r5, #0]
 80022a2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80022a6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80022aa:	b289      	uxth	r1, r1
 80022ac:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80022b0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80022b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80022b8:	6029      	str	r1, [r5, #0]
 80022ba:	4620      	mov	r0, r4
 80022bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022be:	2400      	movs	r4, #0
 80022c0:	e7fb      	b.n	80022ba <st_usbfs_ep_read_packet+0x92>
 80022c2:	bf00      	nop
 80022c4:	40005c50 	.word	0x40005c50
 80022c8:	4000600c 	.word	0x4000600c
 80022cc:	40006008 	.word	0x40006008
 80022d0:	20000228 	.word	0x20000228

080022d4 <st_usbfs_poll>:
 80022d4:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <st_usbfs_poll+0xe0>)
 80022d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	4604      	mov	r4, r0
 80022de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022e2:	4616      	mov	r6, r2
 80022e4:	b29f      	uxth	r7, r3
 80022e6:	d008      	beq.n	80022fa <st_usbfs_poll+0x26>
 80022e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	2340      	movs	r3, #64	; 0x40
 80022f4:	8303      	strh	r3, [r0, #24]
 80022f6:	f7ff b912 	b.w	800151e <_usbd_reset>
 80022fa:	041d      	lsls	r5, r3, #16
 80022fc:	d51f      	bpl.n	800233e <st_usbfs_poll+0x6a>
 80022fe:	f003 080f 	and.w	r8, r3, #15
 8002302:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8002306:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800230a:	f013 0310 	ands.w	r3, r3, #16
 800230e:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8002312:	d036      	beq.n	8002382 <st_usbfs_poll+0xae>
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	0519      	lsls	r1, r3, #20
 8002318:	d53c      	bpl.n	8002394 <st_usbfs_poll+0xc0>
 800231a:	2308      	movs	r3, #8
 800231c:	4641      	mov	r1, r8
 800231e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8002322:	f7ff ff81 	bl	8002228 <st_usbfs_ep_read_packet>
 8002326:	2302      	movs	r3, #2
 8002328:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800232c:	4413      	add	r3, r2
 800232e:	331a      	adds	r3, #26
 8002330:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02f      	beq.n	8002398 <st_usbfs_poll+0xc4>
 8002338:	4641      	mov	r1, r8
 800233a:	4620      	mov	r0, r4
 800233c:	4798      	blx	r3
 800233e:	053a      	lsls	r2, r7, #20
 8002340:	d505      	bpl.n	800234e <st_usbfs_poll+0x7a>
 8002342:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8002346:	6033      	str	r3, [r6, #0]
 8002348:	6a23      	ldr	r3, [r4, #32]
 800234a:	b103      	cbz	r3, 800234e <st_usbfs_poll+0x7a>
 800234c:	4798      	blx	r3
 800234e:	04fb      	lsls	r3, r7, #19
 8002350:	d505      	bpl.n	800235e <st_usbfs_poll+0x8a>
 8002352:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002356:	6033      	str	r3, [r6, #0]
 8002358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800235a:	b103      	cbz	r3, 800235e <st_usbfs_poll+0x8a>
 800235c:	4798      	blx	r3
 800235e:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002362:	4d15      	ldr	r5, [pc, #84]	; (80023b8 <st_usbfs_poll+0xe4>)
 8002364:	d005      	beq.n	8002372 <st_usbfs_poll+0x9e>
 8002366:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800236a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800236c:	6032      	str	r2, [r6, #0]
 800236e:	b1e3      	cbz	r3, 80023aa <st_usbfs_poll+0xd6>
 8002370:	4798      	blx	r3
 8002372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002374:	b1cb      	cbz	r3, 80023aa <st_usbfs_poll+0xd6>
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237c:	602b      	str	r3, [r5, #0]
 800237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002382:	682a      	ldr	r2, [r5, #0]
 8002384:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002388:	0512      	lsls	r2, r2, #20
 800238a:	0d12      	lsrs	r2, r2, #20
 800238c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002390:	602a      	str	r2, [r5, #0]
 8002392:	e7c9      	b.n	8002328 <st_usbfs_poll+0x54>
 8002394:	2301      	movs	r3, #1
 8002396:	e7c7      	b.n	8002328 <st_usbfs_poll+0x54>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800239e:	051b      	lsls	r3, r3, #20
 80023a0:	0d1b      	lsrs	r3, r3, #20
 80023a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a6:	602b      	str	r3, [r5, #0]
 80023a8:	e7c9      	b.n	800233e <st_usbfs_poll+0x6a>
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b0:	e7e4      	b.n	800237c <st_usbfs_poll+0xa8>
 80023b2:	bf00      	nop
 80023b4:	40005c44 	.word	0x40005c44
 80023b8:	40005c40 	.word	0x40005c40

080023bc <memcpy>:
 80023bc:	440a      	add	r2, r1
 80023be:	4291      	cmp	r1, r2
 80023c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80023c4:	d100      	bne.n	80023c8 <memcpy+0xc>
 80023c6:	4770      	bx	lr
 80023c8:	b510      	push	{r4, lr}
 80023ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023ce:	4291      	cmp	r1, r2
 80023d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023d4:	d1f9      	bne.n	80023ca <memcpy+0xe>
 80023d6:	bd10      	pop	{r4, pc}

080023d8 <strlen>:
 80023d8:	4603      	mov	r3, r0
 80023da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d1fb      	bne.n	80023da <strlen+0x2>
 80023e2:	1a18      	subs	r0, r3, r0
 80023e4:	3801      	subs	r0, #1
 80023e6:	4770      	bx	lr

080023e8 <image_data_font_fixedsys_mono_24_0x20>:
 80023e8:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 80023f8:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002408:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

08002418 <font_fixedsys_mono_24_0x20>:
 8002418:	23e8 0800 000c 0019 0008 0000               .#..........

08002424 <image_data_font_fixedsys_mono_24_0x21>:
 8002424:	ffff 80ff ffff 80ff ffff 80ff 0fff 80ff     ................
 8002434:	0fff 80ff 01fc 808f 01fc 808f 01fc 808f     ................
 8002444:	0fff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

08002454 <font_fixedsys_mono_24_0x21>:
 8002454:	2424 0800 000c 0019 0008 0000               $$..........

08002460 <image_data_font_fixedsys_mono_24_0x22>:
 8002460:	ffff 80ff 3ffc 80ff 3ffc 80ff 3ffc 80ff     .....?...?...?..
 8002470:	ffff 80ff ffff 80ff ffff 80ff 3ffc 80ff     .............?..
 8002480:	3ffc 80ff 3ffc 80ff ffff 80ff ffff 80ff     .?...?..........

08002490 <font_fixedsys_mono_24_0x22>:
 8002490:	2460 0800 000c 0019 0008 0000               `$..........

0800249c <image_data_font_fixedsys_mono_24_0x23>:
 800249c:	ffff 80ff bfff 807f bfff 807f 00fc 800f     ................
 80024ac:	00fc 800f 00fc 800f bfff 807f bfff 807f     ................
 80024bc:	00fc 800f 00fc 800f 00fc 800f bfff 807f     ................

080024cc <font_fixedsys_mono_24_0x23>:
 80024cc:	249c 0800 000c 0019 0008 0000               .$..........

080024d8 <image_data_font_fixedsys_mono_24_0x24>:
 80024d8:	ffff 80ff 3ffe 80bf 3ffe 80bf 0ffc 808f     .....?...?......
 80024e8:	e3e1 80e1 e3e1 80e1 f1e1 80e1 fcfc 800f     ................
 80024f8:	fcfc 800f fefe 803f ffff 80ff ffff 80ff     ......?.........

08002508 <font_fixedsys_mono_24_0x24>:
 8002508:	24d8 0800 000c 0019 0008 0000               .$..........

08002514 <image_data_font_fixedsys_mono_24_0x25>:
 8002514:	7ffc 80ff 3ef8 803f 3ef8 803f b8fb 80ff     .....>?..>?.....
 8002524:	b8fb 807f 11f8 808f 66fc 8007 66fc 8007     .........f...f..
 8002534:	8eff 80f7 3efe 8007 3efe 8007 ffff 808f     .....>...>......

08002544 <font_fixedsys_mono_24_0x25>:
 8002544:	2514 0800 000c 0019 0008 0000               .%..........

08002550 <image_data_font_fixedsys_mono_24_0x26>:
 8002550:	ffff 80ff 30fe 803f 00fc 800f 00fc 800f     .....0?.........
 8002560:	effd 80ef effd 80ef 0dfc 80cf 3cfe 803f     .............<?.
 8002570:	3cfe 803f fcff 800f fdff 80ef fdff 80ef     .<?.............

08002580 <font_fixedsys_mono_24_0x26>:
 8002580:	2550 0800 000c 0019 0008 0000               P%..........

0800258c <image_data_font_fixedsys_mono_24_0x27>:
 800258c:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 800259c:	3ffc 80ff 3ffc 80ff 3ffc 80ff ffff 80ff     .?...?...?......
 80025ac:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

080025bc <font_fixedsys_mono_24_0x27>:
 80025bc:	258c 0800 000c 0019 0008 0000               .%..........

080025c8 <image_data_font_fixedsys_mono_24_0x28>:
 80025c8:	ffff 80ff ffff 80ff ffff 80ff c0ff 803f     ..............?.
 80025d8:	c0ff 803f 00fe 8007 3ffc 80c3 3ffc 80c3     ..?......?...?..
 80025e8:	fffd 80fb ffff 80ff ffff 80ff ffff 80ff     ................

080025f8 <font_fixedsys_mono_24_0x28>:
 80025f8:	25c8 0800 000c 0019 0008 0000               .%..........

08002604 <image_data_font_fixedsys_mono_24_0x29>:
 8002604:	ffff 80ff ffff 80ff ffff 80ff fffd 80fb     ................
 8002614:	fffd 80fb 3ffc 80c3 00fe 8007 00fe 8007     .....?..........
 8002624:	c0ff 803f ffff 80ff ffff 80ff ffff 80ff     ..?.............

08002634 <font_fixedsys_mono_24_0x29>:
 8002634:	2604 0800 000c 0019 0008 0000               .&..........

08002640 <image_data_font_fixedsys_mono_24_0x2a>:
 8002640:	ffff 80ff f7ff 80ff f7ff 80ff b6ff 80ff     ................
 8002650:	80ff 80ff 80ff 80ff c3ff 80ff 80ff 80ff     ................
 8002660:	80ff 80ff b6ff 80ff f7ff 80ff f7ff 80ff     ................

08002670 <font_fixedsys_mono_24_0x2a>:
 8002670:	2640 0800 000c 0019 0008 0000               @&..........

0800267c <image_data_font_fixedsys_mono_24_0x2b>:
 800267c:	ffff 80ff fbff 80ff fbff 80ff fbff 80ff     ................
 800268c:	80ff 807f 80ff 807f 80ff 807f fbff 80ff     ................
 800269c:	fbff 80ff fbff 80ff ffff 80ff ffff 80ff     ................

080026ac <font_fixedsys_mono_24_0x2b>:
 80026ac:	267c 0800 000c 0019 0008 0000               |&..........

080026b8 <image_data_font_fixedsys_mono_24_0x2c>:
 80026b8:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 80026c8:	ffff 808d ffff 808d ffff 8081 ffff 8083     ................
 80026d8:	ffff 8083 ffff 80ff ffff 80ff ffff 80ff     ................

080026e8 <font_fixedsys_mono_24_0x2c>:
 80026e8:	26b8 0800 000c 0019 0008 0000               .&..........

080026f4 <image_data_font_fixedsys_mono_24_0x2d>:
 80026f4:	ffff 80ff f7ff 80ff f7ff 80ff f7ff 80ff     ................
 8002704:	f7ff 80ff f7ff 80ff f7ff 80ff f7ff 80ff     ................
 8002714:	f7ff 80ff f7ff 80ff ffff 80ff ffff 80ff     ................

08002724 <font_fixedsys_mono_24_0x2d>:
 8002724:	26f4 0800 000c 0019 0008 0000               .&..........

08002730 <image_data_font_fixedsys_mono_24_0x2e>:
 8002730:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002740:	ffff 808f ffff 808f ffff 808f ffff 808f     ................
 8002750:	ffff 808f ffff 80ff ffff 80ff ffff 80ff     ................

08002760 <font_fixedsys_mono_24_0x2e>:
 8002760:	2730 0800 000c 0019 0008 0000               0'..........

0800276c <image_data_font_fixedsys_mono_24_0x2f>:
 800276c:	ffff 80ff ffff 80c7 ffff 80c7 feff 8007     ................
 800277c:	f0ff 803f f0ff 803f 81ff 80ff 0ffc 80ff     ..?...?.........
 800278c:	0ffc 80ff 7ffc 80ff ffff 80ff ffff 80ff     ................

0800279c <font_fixedsys_mono_24_0x2f>:
 800279c:	276c 0800 000c 0019 0008 0000               l'..........

080027a8 <image_data_font_fixedsys_mono_24_0x30>:
 80027a8:	ffff 80ff ffff 80ff ffff 80ff 00fe 803f     ..............?.
 80027b8:	00fe 803f 00fc 800f fcfd 806f 8cfd 806f     ..?.......o...o.
 80027c8:	8ffd 80ef 00fc 800f 00fc 800f 00fe 803f     ..............?.

080027d8 <font_fixedsys_mono_24_0x30>:
 80027d8:	27a8 0800 000c 0019 0008 0000               .'..........

080027e4 <image_data_font_fixedsys_mono_24_0x31>:
 80027e4:	ffff 80ff bfff 80ff bfff 80ff bfff 80ff     ................
 80027f4:	3fff 80ff 3fff 80ff 00fc 800f 00fc 800f     .?...?..........
 8002804:	00fc 800f ffff 80ff ffff 80ff ffff 80ff     ................

08002814 <font_fixedsys_mono_24_0x31>:
 8002814:	27e4 0800 000c 0019 0008 0000               .'..........

08002820 <image_data_font_fixedsys_mono_24_0x32>:
 8002820:	ffff 80ff 1fff 808f 1fff 808f 1efc 800f     ................
 8002830:	fcfd 806f fcfd 806f f1fd 80ef 03fc 80ef     ..o...o.........
 8002840:	03fc 80ef 0fff 80ef ffff 80ff ffff 80ff     ................

08002850 <font_fixedsys_mono_24_0x32>:
 8002850:	2820 0800 000c 0019 0008 0000                (..........

0800285c <image_data_font_fixedsys_mono_24_0x33>:
 800285c:	ffff 80ff 1eff 803f 1eff 803f 1efc 800f     ......?...?.....
 800286c:	f7fd 80ef f7fd 80ef f7fd 80ef 00fc 800f     ................
 800287c:	00fc 800f 0cff 803f ffff 80ff ffff 80ff     ......?.........

0800288c <font_fixedsys_mono_24_0x33>:
 800288c:	285c 0800 000c 0019 0008 0000               \(..........

08002898 <image_data_font_fixedsys_mono_24_0x34>:
 8002898:	ffff 80ff fcff 807f fcff 807f 00fc 807f     ................
 80028a8:	03fc 807f 03fc 807f ffff 807f 80ff 800f     ................
 80028b8:	80ff 800f 80ff 800f ffff 807f ffff 807f     ................

080028c8 <font_fixedsys_mono_24_0x34>:
 80028c8:	2898 0800 000c 0019 0008 0000               .(..........

080028d4 <image_data_font_fixedsys_mono_24_0x35>:
 80028d4:	ffff 80ff 07fc 80ef 07fc 80ef 07fc 80ef     ................
 80028e4:	f7fd 80ef f7fd 80ef f7fd 808f f0fd 801f     ................
 80028f4:	f0fd 801f fcfd 807f ffff 80ff ffff 80ff     ................

08002904 <font_fixedsys_mono_24_0x35>:
 8002904:	28d4 0800 000c 0019 0008 0000               .(..........

08002910 <image_data_font_fixedsys_mono_24_0x36>:
 8002910:	ffff 80ff e0ff 803f e0ff 803f 80ff 800f     ......?...?.....
 8002920:	0ffc 80ef 0ffc 80ef 6ffc 80ef e0fd 800f     .........o......
 8002930:	e0fd 800f f0ff 803f ffff 80ff ffff 80ff     ......?.........

08002940 <font_fixedsys_mono_24_0x36>:
 8002940:	2910 0800 000c 0019 0008 0000               .)..........

0800294c <image_data_font_fixedsys_mono_24_0x37>:
 800294c:	ffff 80ff fffd 80ff fffd 80ff fffd 800f     ................
 800295c:	fffd 800f f0fd 800f 81fd 80ff 81fd 80ff     ................
 800296c:	0ffc 80ff 7ffc 80ff 7ffc 80ff ffff 80ff     ................

0800297c <font_fixedsys_mono_24_0x37>:
 800297c:	294c 0800 000c 0019 0008 0000               L)..........

08002988 <image_data_font_fixedsys_mono_24_0x38>:
 8002988:	ffff 80ff 0cff 803f 0cff 803f 00fc 800f     ......?...?.....
 8002998:	e3fd 80ef e1fd 80ef f1fd 80ef 00fc 800f     ................
 80029a8:	00fc 800f 0cff 803f ffff 80ff ffff 80ff     ......?.........

080029b8 <font_fixedsys_mono_24_0x38>:
 80029b8:	2988 0800 000c 0019 0008 0000               .)..........

080029c4 <image_data_font_fixedsys_mono_24_0x39>:
 80029c4:	ffff 80ff 03ff 80ff 03ff 80ff 01fc 80ef     ................
 80029d4:	fdfd 808f fdfd 808f fcfd 800f 00fc 807f     ................
 80029e4:	00fc 807f 01ff 80ff ffff 80ff ffff 80ff     ................

080029f4 <font_fixedsys_mono_24_0x39>:
 80029f4:	29c4 0800 000c 0019 0008 0000               .)..........

08002a00 <image_data_font_fixedsys_mono_24_0x3a>:
 8002a00:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002a10:	8fff 808f 8fff 808f 8fff 808f 8fff 808f     ................
 8002a20:	8fff 808f ffff 80ff ffff 80ff ffff 80ff     ................

08002a30 <font_fixedsys_mono_24_0x3a>:
 8002a30:	2a00 0800 000c 0019 0008 0000               .*..........

08002a3c <image_data_font_fixedsys_mono_24_0x3b>:
 8002a3c:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002a4c:	8fff 808d 8fff 808d 8fff 8081 8fff 8083     ................
 8002a5c:	8fff 8083 ffff 80ff ffff 80ff ffff 80ff     ................

08002a6c <font_fixedsys_mono_24_0x3b>:
 8002a6c:	2a3c 0800 000c 0019 0008 0000               <*..........

08002a78 <image_data_font_fixedsys_mono_24_0x3c>:
 8002a78:	ffff 80ff f7ff 80ff f7ff 80ff e1ff 80ff     ................
 8002a88:	8cff 807f 8cff 807f 3efe 803f 7ffc 808f     .........>?.....
 8002a98:	7ffc 808f fffd 80ef ffff 80ff ffff 80ff     ................

08002aa8 <font_fixedsys_mono_24_0x3c>:
 8002aa8:	2a78 0800 000c 0019 0008 0000               x*..........

08002ab4 <image_data_font_fixedsys_mono_24_0x3d>:
 8002ab4:	ffff 80ff edff 80ff edff 80ff edff 80ff     ................
 8002ac4:	edff 80ff edff 80ff edff 80ff edff 80ff     ................
 8002ad4:	edff 80ff edff 80ff ffff 80ff ffff 80ff     ................

08002ae4 <font_fixedsys_mono_24_0x3d>:
 8002ae4:	2ab4 0800 000c 0019 0008 0000               .*..........

08002af0 <image_data_font_fixedsys_mono_24_0x3e>:
 8002af0:	ffff 80ff fffd 80ef fffd 80ef 7ffc 808f     ................
 8002b00:	3efe 803f 3efe 803f 8cff 807f e1ff 80ff     .>?..>?.........
 8002b10:	e1ff 80ff f7ff 80ff ffff 80ff ffff 80ff     ................

08002b20 <font_fixedsys_mono_24_0x3e>:
 8002b20:	2af0 0800 000c 0019 0008 0000               .*..........

08002b2c <image_data_font_fixedsys_mono_24_0x3f>:
 8002b2c:	ffff 80ff 3ffe 80ff 3ffe 80ff 3ffc 80ff     .....?...?...?..
 8002b3c:	f1fd 808f f1fd 808f c1fd 808f 0ffc 80ff     ................
 8002b4c:	0ffc 80ff 3ffe 80ff ffff 80ff ffff 80ff     .....?..........

08002b5c <font_fixedsys_mono_24_0x3f>:
 8002b5c:	2b2c 0800 000c 0019 0008 0000               ,+..........

08002b68 <image_data_font_fixedsys_mono_24_0x40>:
 8002b68:	00fe 803f 00fe 803f 00fc 800f fffd 80ef     ..?...?.........
 8002b78:	fffd 80ef f1fd 80ef e0fd 806f e0fd 806f     ..........o...o.
 8002b88:	effd 806f 00fc 806f 00fc 806f 00fe 806f     ..o...o...o...o.

08002b98 <font_fixedsys_mono_24_0x40>:
 8002b98:	2b68 0800 000c 0019 0008 0000               h+..........

08002ba4 <image_data_font_fixedsys_mono_24_0x41>:
 8002ba4:	ffff 80ff 80ff 800f 80ff 800f 00ff 800f     ................
 8002bb4:	7dfc 80ff 7dfc 80ff 7dfc 80ff 00fe 800f     .}...}...}......
 8002bc4:	00fe 800f 80ff 800f ffff 80ff ffff 80ff     ................

08002bd4 <font_fixedsys_mono_24_0x41>:
 8002bd4:	2ba4 0800 000c 0019 0008 0000               .+..........

08002be0 <image_data_font_fixedsys_mono_24_0x42>:
 8002be0:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002bf0:	f7fd 80ef f7fd 80ef f7fd 80ef 00fc 800f     ................
 8002c00:	00fc 800f 0cff 803f ffff 80ff ffff 80ff     ......?.........

08002c10 <font_fixedsys_mono_24_0x42>:
 8002c10:	2be0 0800 000c 0019 0008 0000               .+..........

08002c1c <image_data_font_fixedsys_mono_24_0x43>:
 8002c1c:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002c2c:	fffd 80ef fffd 80ef fffd 80ef 3efc 800f     .............>..
 8002c3c:	3efc 800f 3efe 803f ffff 80ff ffff 80ff     .>...>?.........

08002c4c <font_fixedsys_mono_24_0x43>:
 8002c4c:	2c1c 0800 000c 0019 0008 0000               .,..........

08002c58 <image_data_font_fixedsys_mono_24_0x44>:
 8002c58:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002c68:	fffd 80ef fffd 80ef 7ffc 808f 00fe 803f     ..............?.
 8002c78:	00fe 803f 80ff 807f ffff 80ff ffff 80ff     ..?.............

08002c88 <font_fixedsys_mono_24_0x44>:
 8002c88:	2c58 0800 000c 0019 0008 0000               X,..........

08002c94 <image_data_font_fixedsys_mono_24_0x45>:
 8002c94:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002ca4:	f7fd 80ef f7fd 80ef f7fd 80ef f7fd 80ef     ................
 8002cb4:	f7fd 80ef fffd 80ef ffff 80ff ffff 80ff     ................

08002cc4 <font_fixedsys_mono_24_0x45>:
 8002cc4:	2c94 0800 000c 0019 0008 0000               .,..........

08002cd0 <image_data_font_fixedsys_mono_24_0x46>:
 8002cd0:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002ce0:	f7fd 80ff f7fd 80ff f7fd 80ff f7fd 80ff     ................
 8002cf0:	f7fd 80ff fffd 80ff ffff 80ff ffff 80ff     ................

08002d00 <font_fixedsys_mono_24_0x46>:
 8002d00:	2cd0 0800 000c 0019 0008 0000               .,..........

08002d0c <image_data_font_fixedsys_mono_24_0x47>:
 8002d0c:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002d1c:	fffd 80ef fdfd 80ef fdfd 80ef 3cfc 800f     .............<..
 8002d2c:	3cfc 800f 3cfe 800f ffff 80ff ffff 80ff     .<...<..........

08002d3c <font_fixedsys_mono_24_0x47>:
 8002d3c:	2d0c 0800 000c 0019 0008 0000               .-..........

08002d48 <image_data_font_fixedsys_mono_24_0x48>:
 8002d48:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002d58:	f7ff 80ff f7ff 80ff f7ff 80ff 00fc 800f     ................
 8002d68:	00fc 800f 00fc 800f ffff 80ff ffff 80ff     ................

08002d78 <font_fixedsys_mono_24_0x48>:
 8002d78:	2d48 0800 000c 0019 0008 0000               H-..........

08002d84 <image_data_font_fixedsys_mono_24_0x49>:
 8002d84:	ffff 80ff ffff 80ff ffff 80ff fffd 80ef     ................
 8002d94:	fffd 80ef 00fc 800f 00fc 800f 00fc 800f     ................
 8002da4:	fffd 80ef ffff 80ff ffff 80ff ffff 80ff     ................

08002db4 <font_fixedsys_mono_24_0x49>:
 8002db4:	2d84 0800 000c 0019 0008 0000               .-..........

08002dc0 <image_data_font_fixedsys_mono_24_0x4a>:
 8002dc0:	ffff 80ff feff 803f feff 803f feff 800f     ......?...?.....
 8002dd0:	ffff 80ef ffff 80ef ffff 80ef 00fc 800f     ................
 8002de0:	00fc 800f 00fc 803f ffff 80ff ffff 80ff     ......?.........

08002df0 <font_fixedsys_mono_24_0x4a>:
 8002df0:	2dc0 0800 000c 0019 0008 0000               .-..........

08002dfc <image_data_font_fixedsys_mono_24_0x4b>:
 8002dfc:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002e0c:	f7ff 80ff f7ff 80ff 80ff 807f 08fc 800f     ................
 8002e1c:	08fc 800f 7ffc 808f ffff 80ff ffff 80ff     ................

08002e2c <font_fixedsys_mono_24_0x4b>:
 8002e2c:	2dfc 0800 000c 0019 0008 0000               .-..........

08002e38 <image_data_font_fixedsys_mono_24_0x4c>:
 8002e38:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002e48:	ffff 80ef ffff 80ef ffff 80ef ffff 80ef     ................
 8002e58:	ffff 80ef ffff 80ef ffff 80ff ffff 80ff     ................

08002e68 <font_fixedsys_mono_24_0x4c>:
 8002e68:	2e38 0800 000c 0019 0008 0000               8...........

08002e74 <image_data_font_fixedsys_mono_24_0x4d>:
 8002e74:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002e84:	9fff 80ff e1ff 80ff c1ff 80ff bfff 80ff     ................
 8002e94:	bfff 80ff 00fc 800f 00fc 800f 00fc 800f     ................

08002ea4 <font_fixedsys_mono_24_0x4d>:
 8002ea4:	2e74 0800 000c 0019 0008 0000               t...........

08002eb0 <image_data_font_fixedsys_mono_24_0x4e>:
 8002eb0:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002ec0:	8fff 80ff 8fff 80ff e3ff 80ff f1ff 80ff     ................
 8002ed0:	f1ff 80ff 00fc 800f 00fc 800f 00fc 800f     ................

08002ee0 <font_fixedsys_mono_24_0x4e>:
 8002ee0:	2eb0 0800 000c 0019 0008 0000               ............

08002eec <image_data_font_fixedsys_mono_24_0x4f>:
 8002eec:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002efc:	fffd 80ef fffd 80ef fffd 80ef 00fc 800f     ................
 8002f0c:	00fc 800f 00fe 803f ffff 80ff ffff 80ff     ......?.........

08002f1c <font_fixedsys_mono_24_0x4f>:
 8002f1c:	2eec 0800 000c 0019 0008 0000               ............

08002f28 <image_data_font_fixedsys_mono_24_0x50>:
 8002f28:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002f38:	f7fd 80ff f7fd 80ff f7fd 80ff 07fc 80ff     ................
 8002f48:	07fc 80ff 0fff 80ff ffff 80ff ffff 80ff     ................

08002f58 <font_fixedsys_mono_24_0x50>:
 8002f58:	2f28 0800 000c 0019 0008 0000               (/..........

08002f64 <image_data_font_fixedsys_mono_24_0x51>:
 8002f64:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002f74:	fffd 80ef fffd 80ef fffd 80e3 00fc 8001     ................
 8002f84:	00fc 8001 00fe 803d ffff 80ff ffff 80ff     ......=.........

08002f94 <font_fixedsys_mono_24_0x51>:
 8002f94:	2f64 0800 000c 0019 0008 0000               d/..........

08002fa0 <image_data_font_fixedsys_mono_24_0x52>:
 8002fa0:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002fb0:	f7fd 80ff f7fd 80ff f0fd 80ff 00fc 800f     ................
 8002fc0:	00fc 800f 0fff 800f ffff 80ff ffff 80ff     ................

08002fd0 <font_fixedsys_mono_24_0x52>:
 8002fd0:	2fa0 0800 000c 0019 0008 0000               ./..........

08002fdc <image_data_font_fixedsys_mono_24_0x53>:
 8002fdc:	ffff 80ff 3ffe 80bf 3ffe 80bf 0ffc 808f     .....?...?......
 8002fec:	e3fd 80ef e3fd 80ef f1fd 80ef fcfc 800f     ................
 8002ffc:	fcfc 800f fefe 803f ffff 80ff ffff 80ff     ......?.........

0800300c <font_fixedsys_mono_24_0x53>:
 800300c:	2fdc 0800 000c 0019 0008 0000               ./..........

08003018 <image_data_font_fixedsys_mono_24_0x54>:
 8003018:	ffff 80ff fffd 80ff fffd 80ff fffd 80ff     ................
 8003028:	00fc 800f 00fc 800f 00fc 800f fffd 80ff     ................
 8003038:	fffd 80ff fffd 80ff ffff 80ff ffff 80ff     ................

08003048 <font_fixedsys_mono_24_0x54>:
 8003048:	3018 0800 000c 0019 0008 0000               .0..........

08003054 <image_data_font_fixedsys_mono_24_0x55>:
 8003054:	ffff 80ff 00fc 803f 00fc 803f 00fc 800f     ......?...?.....
 8003064:	ffff 80ef ffff 80ef ffff 80ef 00fc 800f     ................
 8003074:	00fc 800f 00fc 803f ffff 80ff ffff 80ff     ......?.........

08003084 <font_fixedsys_mono_24_0x55>:
 8003084:	3054 0800 000c 0019 0008 0000               T0..........

08003090 <image_data_font_fixedsys_mono_24_0x56>:
 8003090:	ffff 80ff 00fc 807f 00fc 807f 00fc 801f     ................
 80030a0:	ffff 808f ffff 808f ffff 808f 00fc 803f     ..............?.
 80030b0:	00fc 803f 00fc 807f ffff 80ff ffff 80ff     ..?.............

080030c0 <font_fixedsys_mono_24_0x56>:
 80030c0:	3090 0800 000c 0019 0008 0000               .0..........

080030cc <image_data_font_fixedsys_mono_24_0x57>:
 80030cc:	ffff 80ff 01fc 80ff 01fc 80ff 00fc 800f     ................
 80030dc:	ffff 800f feff 800f e0ff 80ff ffff 800f     ................
 80030ec:	ffff 800f 00fc 800f 01fc 80ff 01fc 80ff     ................

080030fc <font_fixedsys_mono_24_0x57>:
 80030fc:	30cc 0800 000c 0019 0008 0000               .0..........

08003108 <image_data_font_fixedsys_mono_24_0x58>:
 8003108:	ffff 80ff 7ffc 800f 18fc 800f 18fc 800f     ................
 8003118:	87ff 80ff e7ff 80ff e1ff 80ff 18fc 800f     ................
 8003128:	18fc 800f 7ffc 800f ffff 80ff ffff 80ff     ................

08003138 <font_fixedsys_mono_24_0x58>:
 8003138:	3108 0800 000c 0019 0008 0000               .1..........

08003144 <image_data_font_fixedsys_mono_24_0x59>:
 8003144:	ffff 80ff 0ffc 80ff 0ffc 80ff 03fc 80ff     ................
 8003154:	f0ff 800f f0ff 800f f0ff 800f 03fc 80ff     ................
 8003164:	03fc 80ff 0ffc 80ff ffff 80ff ffff 80ff     ................

08003174 <font_fixedsys_mono_24_0x59>:
 8003174:	3144 0800 000c 0019 0008 0000               D1..........

08003180 <image_data_font_fixedsys_mono_24_0x5a>:
 8003180:	ffff 80ff fefd 800f fefd 800f fcfd 800f     ................
 8003190:	f1fd 80ef f1fd 80ef e3fd 80ef 0ffc 80ef     ................
 80031a0:	0ffc 80ef 1ffc 80ef ffff 80ff ffff 80ff     ................

080031b0 <font_fixedsys_mono_24_0x5a>:
 80031b0:	3180 0800 000c 0019 0008 0000               .1..........

080031bc <image_data_font_fixedsys_mono_24_0x5b>:
 80031bc:	ffff 80ff ffff 80ff ffff 80ff 00fc 0000     ................
 80031cc:	00fc 0000 00fc 0000 fffd 00ff fffd 00ff     ................
 80031dc:	fffd 00ff ffff 80ff ffff 80ff ffff 80ff     ................

080031ec <font_fixedsys_mono_24_0x5b>:
 80031ec:	31bc 0800 000c 0019 0008 0000               .1..........

080031f8 <image_data_font_fixedsys_mono_24_0x5c>:
 80031f8:	ffff 80ff 7ffc 80ff 7ffc 80ff 0ffc 80ff     ................
 8003208:	81ff 80ff 81ff 80ff f0ff 803f feff 8007     ..........?.....
 8003218:	feff 8007 ffff 80c7 ffff 80ff ffff 80ff     ................

08003228 <font_fixedsys_mono_24_0x5c>:
 8003228:	31f8 0800 000c 0019 0008 0000               .1..........

08003234 <image_data_font_fixedsys_mono_24_0x5d>:
 8003234:	ffff 80ff ffff 80ff ffff 80ff fffd 00ff     ................
 8003244:	fffd 00ff fffd 00ff 00fc 0000 00fc 0000     ................
 8003254:	00fc 0000 ffff 80ff ffff 80ff ffff 80ff     ................

08003264 <font_fixedsys_mono_24_0x5d>:
 8003264:	3234 0800 000c 0019 0008 0000               42..........

08003270 <image_data_font_fixedsys_mono_24_0x5e>:
 8003270:	ffff 80ff fffd 80ff fffd 80ff fff1 80ff     ................
 8003280:	ffc7 80ff ffc7 80ff ffc7 80ff ffe1 80ff     ................
 8003290:	ffe1 80ff fffd 80ff ffff 80ff ffff 80ff     ................

080032a0 <font_fixedsys_mono_24_0x5e>:
 80032a0:	3270 0800 000c 0019 0008 0000               p2..........

080032ac <image_data_font_fixedsys_mono_24_0x5f>:
 80032ac:	ffff 80fe ffff 80fe ffff 80fe ffff 80fe     ................
 80032bc:	ffff 80fe ffff 80fe ffff 80fe ffff 80fe     ................
 80032cc:	ffff 80fe ffff 80fe ffff 80fe ffff 80fe     ................

080032dc <font_fixedsys_mono_24_0x5f>:
 80032dc:	32ac 0800 000c 0019 0008 0000               .2..........

080032e8 <image_data_font_fixedsys_mono_24_0x60>:
 80032e8:	ffff 80ff ffff 80ff ffef 80ff ffef 80ff     ................
 80032f8:	ffe3 80ff ffe3 80ff ffe1 80ff fffd 80ff     ................
 8003308:	fffd 80ff ffff 80ff ffff 80ff ffff 80ff     ................

08003318 <font_fixedsys_mono_24_0x60>:
 8003318:	32e8 0800 000c 0019 0008 0000               .2..........

08003324 <image_data_font_fixedsys_mono_24_0x61>:
 8003324:	ffff 80ff feff 803f feff 803f bcff 800f     ......?...?.....
 8003334:	bdff 80ef bdff 80ef bdff 80ef 80ff 800f     ................
 8003344:	80ff 800f c0ff 800f ffff 80ff ffff 80ff     ................

08003354 <font_fixedsys_mono_24_0x61>:
 8003354:	3324 0800 000c 0019 0008 0000               $3..........

08003360 <image_data_font_fixedsys_mono_24_0x62>:
 8003360:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8003370:	bfff 80ef bfff 80ef bfff 80ef 80ff 800f     ................
 8003380:	80ff 800f e0ff 801f ffff 80ff ffff 80ff     ................

08003390 <font_fixedsys_mono_24_0x62>:
 8003390:	3360 0800 000c 0019 0008 0000               `3..........

0800339c <image_data_font_fixedsys_mono_24_0x63>:
 800339c:	ffff 80ff e0ff 803f e0ff 803f 80ff 800f     ......?...?.....
 80033ac:	bfff 80ef bfff 80ef bfff 80ef 8fff 808f     ................
 80033bc:	8fff 808f efff 80bf ffff 80ff ffff 80ff     ................

080033cc <font_fixedsys_mono_24_0x63>:
 80033cc:	339c 0800 000c 0019 0008 0000               .3..........

080033d8 <image_data_font_fixedsys_mono_24_0x64>:
 80033d8:	ffff 80ff e0ff 801f 80ff 800f 80ff 800f     ................
 80033e8:	bfff 80ef bfff 80ef bfff 80ef 00fc 800f     ................
 80033f8:	00fc 800f 00fc 800f ffff 80ff ffff 80ff     ................

08003408 <font_fixedsys_mono_24_0x64>:
 8003408:	33d8 0800 000c 0019 0008 0000               .3..........

08003414 <image_data_font_fixedsys_mono_24_0x65>:
 8003414:	ffff 80ff e0ff 801f e0ff 801f 80ff 800f     ................
 8003424:	bdff 80ef bdff 80ef bdff 80ef 81ff 80ef     ................
 8003434:	81ff 80ef e1ff 80ff ffff 80ff ffff 80ff     ................

08003444 <font_fixedsys_mono_24_0x65>:
 8003444:	3414 0800 000c 0019 0008 0000               .4..........

08003450 <image_data_font_fixedsys_mono_24_0x66>:
 8003450:	ffff 80ff f7ff 80ff f7ff 80ff 00ff 800f     ................
 8003460:	00fc 800f 00fc 800f f7fd 80ff f7fd 80ff     ................
 8003470:	f7fd 80ff f7fd 80ff ffff 80ff ffff 80ff     ................

08003480 <font_fixedsys_mono_24_0x66>:
 8003480:	3450 0800 000c 0019 0008 0000               P4..........

0800348c <image_data_font_fixedsys_mono_24_0x67>:
 800348c:	ffff 80ff e0ff 001f 80ff 000f 80ff 000f     ................
 800349c:	bfff 00ef bfff 00ef bfff 00ef 80ff 0000     ................
 80034ac:	80ff 0000 80ff 8000 ffff 80ff ffff 80ff     ................

080034bc <font_fixedsys_mono_24_0x67>:
 80034bc:	348c 0800 000c 0019 0008 0000               .4..........

080034c8 <image_data_font_fixedsys_mono_24_0x68>:
 80034c8:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 80034d8:	bfff 80ff bfff 80ff bfff 80ff 80ff 800f     ................
 80034e8:	80ff 800f e0ff 800f ffff 80ff ffff 80ff     ................

080034f8 <font_fixedsys_mono_24_0x68>:
 80034f8:	34c8 0800 000c 0019 0008 0000               .4..........

08003504 <image_data_font_fixedsys_mono_24_0x69>:
 8003504:	ffff 80ff bfff 80ef bfff 80ef bfff 80ef     ................
 8003514:	80f1 800f 80f1 800f 80f1 800f ffff 80ef     ................
 8003524:	ffff 80ef ffff 80ef ffff 80ff ffff 80ff     ................

08003534 <font_fixedsys_mono_24_0x69>:
 8003534:	3504 0800 000c 0019 0008 0000               .5..........

08003540 <image_data_font_fixedsys_mono_24_0x6a>:
 8003540:	ffff 80ff ffff 00ff ffff 00ff bfff 00ff     ................
 8003550:	bfff 00ff bfff 00ff 80f8 0000 80f8 8000     ................
 8003560:	80f8 8000 ffff 80ff ffff 80ff ffff 80ff     ................

08003570 <font_fixedsys_mono_24_0x6a>:
 8003570:	3540 0800 000c 0019 0008 0000               @5..........

0800357c <image_data_font_fixedsys_mono_24_0x6b>:
 800357c:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 800358c:	fdff 80ff fdff 80ff f0ff 80ff 82ff 800f     ................
 800359c:	82ff 800f 8fff 808f ffff 80ff ffff 80ff     ................

080035ac <font_fixedsys_mono_24_0x6b>:
 80035ac:	357c 0800 000c 0019 0008 0000               |5..........

080035b8 <image_data_font_fixedsys_mono_24_0x6c>:
 80035b8:	ffff 80ff fffd 80ef fffd 80ef fffd 80ef     ................
 80035c8:	00fc 800f 00fc 800f 00fc 800f ffff 80ef     ................
 80035d8:	ffff 80ef ffff 80ef ffff 80ff ffff 80ff     ................

080035e8 <font_fixedsys_mono_24_0x6c>:
 80035e8:	35b8 0800 000c 0019 0008 0000               .5..........

080035f4 <image_data_font_fixedsys_mono_24_0x6d>:
 80035f4:	ffff 80ff 80ff 800f 80ff 800f 80ff 800f     ................
 8003604:	bfff 80ff 80ff 801f 80ff 801f bfff 80ff     ................
 8003614:	bfff 80ff 80ff 800f 80ff 800f e0ff 800f     ................

08003624 <font_fixedsys_mono_24_0x6d>:
 8003624:	35f4 0800 000c 0019 0008 0000               .5..........

08003630 <image_data_font_fixedsys_mono_24_0x6e>:
 8003630:	ffff 80ff 80ff 800f 80ff 800f 80ff 800f     ................
 8003640:	bfff 80ff bfff 80ff bfff 80ff 80ff 800f     ................
 8003650:	80ff 800f e0ff 800f ffff 80ff ffff 80ff     ................

08003660 <font_fixedsys_mono_24_0x6e>:
 8003660:	3630 0800 000c 0019 0008 0000               06..........

0800366c <image_data_font_fixedsys_mono_24_0x6f>:
 800366c:	ffff 80ff e0ff 801f e0ff 801f 80ff 800f     ................
 800367c:	bfff 80ef bfff 80ef bfff 80ef 80ff 800f     ................
 800368c:	80ff 800f e0ff 801f ffff 80ff ffff 80ff     ................

0800369c <font_fixedsys_mono_24_0x6f>:
 800369c:	366c 0800 000c 0019 0008 0000               l6..........

080036a8 <image_data_font_fixedsys_mono_24_0x70>:
 80036a8:	ffff 80ff 80ff 0000 80ff 0000 80ff 0000     ................
 80036b8:	bfff 80ef bfff 80ef bfff 80ef 80ff 800f     ................
 80036c8:	80ff 800f e0ff 801f ffff 80ff ffff 80ff     ................

080036d8 <font_fixedsys_mono_24_0x70>:
 80036d8:	36a8 0800 000c 0019 0008 0000               .6..........

080036e4 <image_data_font_fixedsys_mono_24_0x71>:
 80036e4:	ffff 80ff e0ff 801f 80ff 800f 80ff 800f     ................
 80036f4:	bfff 80ef bfff 80ef bfff 80ef 80ff 0000     ................
 8003704:	80ff 0000 80ff 0000 ffff 80ff ffff 80ff     ................

08003714 <font_fixedsys_mono_24_0x71>:
 8003714:	36e4 0800 000c 0019 0008 0000               .6..........

08003720 <image_data_font_fixedsys_mono_24_0x72>:
 8003720:	ffff 80ff 80ff 800f 80ff 800f 80ff 800f     ................
 8003730:	f7ff 80ff e7ff 80ff efff 80ff 8fff 80ff     ................
 8003740:	8fff 80ff 8fff 80ff ffff 80ff ffff 80ff     ................

08003750 <font_fixedsys_mono_24_0x72>:
 8003750:	3720 0800 000c 0019 0008 0000                7..........

0800375c <image_data_font_fixedsys_mono_24_0x73>:
 800375c:	ffff 80ff e3ff 80ef e3ff 80ef 81ff 80ef     ................
 800376c:	bdff 80ef bdff 80ef bdff 80ef bcff 800f     ................
 800377c:	bcff 800f beff 803f ffff 80ff ffff 80ff     ......?.........

0800378c <font_fixedsys_mono_24_0x73>:
 800378c:	375c 0800 000c 0019 0008 0000               \7..........

08003798 <image_data_font_fixedsys_mono_24_0x74>:
 8003798:	ffff 80ff bfff 80ff bfff 80ff 00fc 803f     ..............?.
 80037a8:	00fc 800f 00fc 800f bfff 80ef bfff 80ef     ................
 80037b8:	bfff 80ef bfff 80ef ffff 80ff ffff 80ff     ................

080037c8 <font_fixedsys_mono_24_0x74>:
 80037c8:	3798 0800 000c 0019 0008 0000               .7..........

080037d4 <image_data_font_fixedsys_mono_24_0x75>:
 80037d4:	ffff 80ff 80ff 803f 80ff 800f 80ff 800f     ......?.........
 80037e4:	ffff 80ef ffff 80ef ffff 80ef 80ff 800f     ................
 80037f4:	80ff 800f 80ff 800f ffff 80ff ffff 80ff     ................

08003804 <font_fixedsys_mono_24_0x75>:
 8003804:	37d4 0800 000c 0019 0008 0000               .7..........

08003810 <image_data_font_fixedsys_mono_24_0x76>:
 8003810:	ffff 80ff 80ff 807f 80ff 807f 80ff 801f     ................
 8003820:	ffff 808f ffff 808f ffff 808f 80ff 803f     ..............?.
 8003830:	80ff 803f 80ff 807f ffff 80ff ffff 80ff     ..?.............

08003840 <font_fixedsys_mono_24_0x76>:
 8003840:	3810 0800 000c 0019 0008 0000               .8..........

0800384c <image_data_font_fixedsys_mono_24_0x77>:
 800384c:	ffff 80ff 80ff 807f 80ff 807f 80ff 800f     ................
 800385c:	ffff 808f ffff 808f e0ff 807f ffff 808f     ................
 800386c:	ffff 808f 80ff 800f 80ff 807f 80ff 807f     ................

0800387c <font_fixedsys_mono_24_0x77>:
 800387c:	384c 0800 000c 0019 0008 0000               L8..........

08003888 <image_data_font_fixedsys_mono_24_0x78>:
 8003888:	ffff 80ff 8fff 808f 8fff 808f 86ff 800f     ................
 8003898:	f0ff 80ff f0ff 80ff f0ff 80ff 86ff 800f     ................
 80038a8:	86ff 800f 8fff 808f ffff 80ff ffff 80ff     ................

080038b8 <font_fixedsys_mono_24_0x78>:
 80038b8:	3888 0800 000c 0019 0008 0000               .8..........

080038c4 <image_data_font_fixedsys_mono_24_0x79>:
 80038c4:	ffff 00ff ffff 00ff 80ff 003f 80ff 000f     ..........?.....
 80038d4:	80ff 000f ffff 00ec ffff 80e0 ffff 80e0     ................
 80038e4:	80ff 8003 80ff 803f 80ff 803f ffff 80ff     ......?...?.....

080038f4 <font_fixedsys_mono_24_0x79>:
 80038f4:	38c4 0800 000c 0019 0008 0000               .8..........

08003900 <image_data_font_fixedsys_mono_24_0x7a>:
 8003900:	ffff 80ff bfff 808f bfff 808f beff 800f     ................
 8003910:	bcff 806f bcff 806f b1ff 80ef 83ff 80ef     ..o...o.........
 8003920:	83ff 80ef 8fff 80ef ffff 80ff ffff 80ff     ................

08003930 <font_fixedsys_mono_24_0x7a>:
 8003930:	3900 0800 000c 0019 0008 0000               .9..........

0800393c <image_data_font_fixedsys_mono_24_0x7b>:
 800393c:	ffff 80ff fdff 80ff fdff 80ff f0ff 80ff     ................
 800394c:	06fe 8007 06fe 8007 0ffc 8003 fffd 80fb     ................
 800395c:	fffd 80fb ffff 80ff ffff 80ff ffff 80ff     ................

0800396c <font_fixedsys_mono_24_0x7b>:
 800396c:	393c 0800 000c 0019 0008 0000               <9..........

08003978 <image_data_font_fixedsys_mono_24_0x7c>:
 8003978:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8003988:	00fc 0000 00fc 0000 00fc 0000 ffff 80ff     ................
 8003998:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

080039a8 <font_fixedsys_mono_24_0x7c>:
 80039a8:	3978 0800 000c 0019 0008 0000               x9..........

080039b4 <image_data_font_fixedsys_mono_24_0x7d>:
 80039b4:	ffff 80ff ffff 80ff ffff 80ff fffd 80fb     ................
 80039c4:	fffd 80fb 0ffc 8003 06fe 8007 06fe 8007     ................
 80039d4:	f0ff 80ff fdff 80ff fdff 80ff ffff 80ff     ................

080039e4 <font_fixedsys_mono_24_0x7d>:
 80039e4:	39b4 0800 000c 0019 0008 0000               .9..........

080039f0 <image_data_font_fixedsys_mono_24_0x7e>:
 80039f0:	3ffe 80ff 3ffe 80ff fff8 80ff fff8 80ff     .?...?..........
 8003a00:	fffb 80ff 3ff8 80ff 3ffe 80ff 3ffe 80ff     .....?...?...?..
 8003a10:	bfff 80ff 3ffe 80ff fffc 80ff ffff 80ff     .....?..........

08003a20 <font_fixedsys_mono_24_0x7e>:
 8003a20:	39f0 0800 000c 0019 0008 0000               .9..........

08003a2c <font_fixedsys_mono_24_array>:
 8003a2c:	0020 0000 2418 0800 0021 0000 2454 0800      ....$..!...T$..
 8003a3c:	0022 0000 2490 0800 0023 0000 24cc 0800     "....$..#....$..
 8003a4c:	0024 0000 2508 0800 0025 0000 2544 0800     $....%..%...D%..
 8003a5c:	0026 0000 2580 0800 0027 0000 25bc 0800     &....%..'....%..
 8003a6c:	0028 0000 25f8 0800 0029 0000 2634 0800     (....%..)...4&..
 8003a7c:	002a 0000 2670 0800 002b 0000 26ac 0800     *...p&..+....&..
 8003a8c:	002c 0000 26e8 0800 002d 0000 2724 0800     ,....&..-...$'..
 8003a9c:	002e 0000 2760 0800 002f 0000 279c 0800     ....`'../....'..
 8003aac:	0030 0000 27d8 0800 0031 0000 2814 0800     0....'..1....(..
 8003abc:	0032 0000 2850 0800 0033 0000 288c 0800     2...P(..3....(..
 8003acc:	0034 0000 28c8 0800 0035 0000 2904 0800     4....(..5....)..
 8003adc:	0036 0000 2940 0800 0037 0000 297c 0800     6...@)..7...|)..
 8003aec:	0038 0000 29b8 0800 0039 0000 29f4 0800     8....)..9....)..
 8003afc:	003a 0000 2a30 0800 003b 0000 2a6c 0800     :...0*..;...l*..
 8003b0c:	003c 0000 2aa8 0800 003d 0000 2ae4 0800     <....*..=....*..
 8003b1c:	003e 0000 2b20 0800 003f 0000 2b5c 0800     >... +..?...\+..
 8003b2c:	0040 0000 2b98 0800 0041 0000 2bd4 0800     @....+..A....+..
 8003b3c:	0042 0000 2c10 0800 0043 0000 2c4c 0800     B....,..C...L,..
 8003b4c:	0044 0000 2c88 0800 0045 0000 2cc4 0800     D....,..E....,..
 8003b5c:	0046 0000 2d00 0800 0047 0000 2d3c 0800     F....-..G...<-..
 8003b6c:	0048 0000 2d78 0800 0049 0000 2db4 0800     H...x-..I....-..
 8003b7c:	004a 0000 2df0 0800 004b 0000 2e2c 0800     J....-..K...,...
 8003b8c:	004c 0000 2e68 0800 004d 0000 2ea4 0800     L...h...M.......
 8003b9c:	004e 0000 2ee0 0800 004f 0000 2f1c 0800     N.......O..../..
 8003bac:	0050 0000 2f58 0800 0051 0000 2f94 0800     P...X/..Q..../..
 8003bbc:	0052 0000 2fd0 0800 0053 0000 300c 0800     R..../..S....0..
 8003bcc:	0054 0000 3048 0800 0055 0000 3084 0800     T...H0..U....0..
 8003bdc:	0056 0000 30c0 0800 0057 0000 30fc 0800     V....0..W....0..
 8003bec:	0058 0000 3138 0800 0059 0000 3174 0800     X...81..Y...t1..
 8003bfc:	005a 0000 31b0 0800 005b 0000 31ec 0800     Z....1..[....1..
 8003c0c:	005c 0000 3228 0800 005d 0000 3264 0800     \...(2..]...d2..
 8003c1c:	005e 0000 32a0 0800 005f 0000 32dc 0800     ^....2.._....2..
 8003c2c:	0060 0000 3318 0800 0061 0000 3354 0800     `....3..a...T3..
 8003c3c:	0062 0000 3390 0800 0063 0000 33cc 0800     b....3..c....3..
 8003c4c:	0064 0000 3408 0800 0065 0000 3444 0800     d....4..e...D4..
 8003c5c:	0066 0000 3480 0800 0067 0000 34bc 0800     f....4..g....4..
 8003c6c:	0068 0000 34f8 0800 0069 0000 3534 0800     h....4..i...45..
 8003c7c:	006a 0000 3570 0800 006b 0000 35ac 0800     j...p5..k....5..
 8003c8c:	006c 0000 35e8 0800 006d 0000 3624 0800     l....5..m...$6..
 8003c9c:	006e 0000 3660 0800 006f 0000 369c 0800     n...`6..o....6..
 8003cac:	0070 0000 36d8 0800 0071 0000 3714 0800     p....6..q....7..
 8003cbc:	0072 0000 3750 0800 0073 0000 378c 0800     r...P7..s....7..
 8003ccc:	0074 0000 37c8 0800 0075 0000 3804 0800     t....7..u....8..
 8003cdc:	0076 0000 3840 0800 0077 0000 387c 0800     v...@8..w...|8..
 8003cec:	0078 0000 38b8 0800 0079 0000 38f4 0800     x....8..y....8..
 8003cfc:	007a 0000 3930 0800 007b 0000 396c 0800     z...09..{...l9..
 8003d0c:	007c 0000 39a8 0800 007d 0000 39e4 0800     |....9..}....9..
 8003d1c:	007e 0000 3a20 0800                         ~... :..

08003d24 <font_fixedsys_mono_24>:
 8003d24:	005f 0000 3a2c 0800 6954 796e 4d20 6e6f     _...,:..Tiny Mon
 8003d34:	7469 726f 7620 2e31 0030 0000 6f43 6e6e     itor v1.0...Conn
 8003d44:	6365 2074 5355 2e42 2e2e 0000 5355 2042     ect USB.....USB 
 8003d54:	6f63 6e6e 6365 6574 2e64 4320 6e6f 6966     connected. Confi
 8003d64:	2067 7369 7320 7465 2e2e 002e 6f43 6e6e     g is set....Conn
 8003d74:	6365 6574 2064 6f74 6820 736f 2074 6f73     ected to host so
 8003d84:	7466 6177 6572 2e2e 002e 0000 7554 6f74     ftware......Tuto
 8003d94:	6972 6c61 0000 0000 6944 7073 616c 0079     rial....Display.
 8003da4:	6944 7073 616c 2079 6e49 6574 6672 6361     Display Interfac
 8003db4:	0065 0000                                   e...

08003db8 <usb_desc_strings>:
 8003db8:	3d90 0800 3d9c 0800 0118 2000 3da4 0800     .=...=..... .=..

08003dc8 <comm_endpoint_descs>:
 8003dc8:	0507 0201 0040 0000 0000 0000 0000 0700     ....@...........
 8003dd8:	8205 4001 0100 0000 0000 0000 0000 0000     ...@............

08003de8 <comm_if_descs>:
 8003de8:	0409 0000 ff02 0000 c804 003d 0008 0000     ..........=.....
	...

08003e00 <usb_interfaces>:
 8003e00:	0000 0000 0001 0000 0000 0000 3de8 0800     .............=..

08003e10 <usb_config_descs>:
 8003e10:	0209 0000 0101 8000 00fa 003e 0008 0000     ..........>.....

08003e20 <usb_device_desc>:
 8003e20:	0112 0200 00ff 4000 cafe ceaf 0061 0201     .......@....a...
 8003e30:	0103 0000                                   ....

08003e34 <HEX_DIGITS>:
 8003e34:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8003e44:	0000 0000                                   ....

08003e48 <st_usbfs_v1_usb_driver>:
 8003e48:	1db5 0800 1ebd 0800 1f0d 0800 2031 0800     ............1 ..
 8003e58:	2075 0800 216d 0800 2135 0800 21a9 0800     u ..m!..5!...!..
 8003e68:	2229 0800 22d5 0800 0000 0000 0000 0000     )"..."..........
 8003e78:	0000 0000                                   ....
